// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: transManager.proto
#ifndef GRPC_transManager_2eproto__INCLUDED
#define GRPC_transManager_2eproto__INCLUDED

#include "transManager.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace helmsley {

class dataTransfer final {
 public:
  static constexpr char const* service_full_name() {
    return "helmsley.dataTransfer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status getAvailableConfigs(::grpc::ClientContext* context, const ::Request& request, ::helmsley::configResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helmsley::configResponse>> AsyncgetAvailableConfigs(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helmsley::configResponse>>(AsyncgetAvailableConfigsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helmsley::configResponse>> PrepareAsyncgetAvailableConfigs(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helmsley::configResponse>>(PrepareAsyncgetAvailableConfigsRaw(context, request, cq));
    }
    virtual ::grpc::Status exportConfigs(::grpc::ClientContext* context, const ::Request& request, ::commonResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commonResponse>> AsyncexportConfigs(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commonResponse>>(AsyncexportConfigsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commonResponse>> PrepareAsyncexportConfigs(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commonResponse>>(PrepareAsyncexportConfigsRaw(context, request, cq));
    }
    virtual ::grpc::Status getAvailableDatasets(::grpc::ClientContext* context, const ::Request& request, ::helmsley::datasetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helmsley::datasetResponse>> AsyncgetAvailableDatasets(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helmsley::datasetResponse>>(AsyncgetAvailableDatasetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helmsley::datasetResponse>> PrepareAsyncgetAvailableDatasets(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helmsley::datasetResponse>>(PrepareAsyncgetAvailableDatasetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::helmsley::volumeResponse>> getVolumeFromDataset(::grpc::ClientContext* context, const ::Request& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::helmsley::volumeResponse>>(getVolumeFromDatasetRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helmsley::volumeResponse>> AsyncgetVolumeFromDataset(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helmsley::volumeResponse>>(AsyncgetVolumeFromDatasetRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helmsley::volumeResponse>> PrepareAsyncgetVolumeFromDataset(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helmsley::volumeResponse>>(PrepareAsyncgetVolumeFromDatasetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::helmsley::dcmImage>> Download(::grpc::ClientContext* context, const ::Request& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::helmsley::dcmImage>>(DownloadRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helmsley::dcmImage>> AsyncDownload(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helmsley::dcmImage>>(AsyncDownloadRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helmsley::dcmImage>> PrepareAsyncDownload(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helmsley::dcmImage>>(PrepareAsyncDownloadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::helmsley::volumeWholeResponse>> DownloadVolume(::grpc::ClientContext* context, const ::helmsley::RequestWholeVolume& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::helmsley::volumeWholeResponse>>(DownloadVolumeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helmsley::volumeWholeResponse>> AsyncDownloadVolume(::grpc::ClientContext* context, const ::helmsley::RequestWholeVolume& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helmsley::volumeWholeResponse>>(AsyncDownloadVolumeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helmsley::volumeWholeResponse>> PrepareAsyncDownloadVolume(::grpc::ClientContext* context, const ::helmsley::RequestWholeVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helmsley::volumeWholeResponse>>(PrepareAsyncDownloadVolumeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::helmsley::dcmImage>> DownloadMasks(::grpc::ClientContext* context, const ::Request& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::helmsley::dcmImage>>(DownloadMasksRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helmsley::dcmImage>> AsyncDownloadMasks(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helmsley::dcmImage>>(AsyncDownloadMasksRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helmsley::dcmImage>> PrepareAsyncDownloadMasks(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helmsley::dcmImage>>(PrepareAsyncDownloadMasksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::helmsley::volumeWholeResponse>> DownloadMasksVolume(::grpc::ClientContext* context, const ::Request& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::helmsley::volumeWholeResponse>>(DownloadMasksVolumeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helmsley::volumeWholeResponse>> AsyncDownloadMasksVolume(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helmsley::volumeWholeResponse>>(AsyncDownloadMasksVolumeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helmsley::volumeWholeResponse>> PrepareAsyncDownloadMasksVolume(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helmsley::volumeWholeResponse>>(PrepareAsyncDownloadMasksVolumeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::helmsley::centerlineData>> DownloadCenterLineData(::grpc::ClientContext* context, const ::Request& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::helmsley::centerlineData>>(DownloadCenterLineDataRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helmsley::centerlineData>> AsyncDownloadCenterLineData(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helmsley::centerlineData>>(AsyncDownloadCenterLineDataRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helmsley::centerlineData>> PrepareAsyncDownloadCenterLineData(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helmsley::centerlineData>>(PrepareAsyncDownloadCenterLineDataRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void getAvailableConfigs(::grpc::ClientContext* context, const ::Request* request, ::helmsley::configResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getAvailableConfigs(::grpc::ClientContext* context, const ::Request* request, ::helmsley::configResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getAvailableConfigs(::grpc::ClientContext* context, const ::Request* request, ::helmsley::configResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void exportConfigs(::grpc::ClientContext* context, const ::Request* request, ::commonResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void exportConfigs(::grpc::ClientContext* context, const ::Request* request, ::commonResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void exportConfigs(::grpc::ClientContext* context, const ::Request* request, ::commonResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getAvailableDatasets(::grpc::ClientContext* context, const ::Request* request, ::helmsley::datasetResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getAvailableDatasets(::grpc::ClientContext* context, const ::Request* request, ::helmsley::datasetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getAvailableDatasets(::grpc::ClientContext* context, const ::Request* request, ::helmsley::datasetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getVolumeFromDataset(::grpc::ClientContext* context, ::Request* request, ::grpc::ClientReadReactor< ::helmsley::volumeResponse>* reactor) = 0;
      #else
      virtual void getVolumeFromDataset(::grpc::ClientContext* context, ::Request* request, ::grpc::experimental::ClientReadReactor< ::helmsley::volumeResponse>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Download(::grpc::ClientContext* context, ::Request* request, ::grpc::ClientReadReactor< ::helmsley::dcmImage>* reactor) = 0;
      #else
      virtual void Download(::grpc::ClientContext* context, ::Request* request, ::grpc::experimental::ClientReadReactor< ::helmsley::dcmImage>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DownloadVolume(::grpc::ClientContext* context, ::helmsley::RequestWholeVolume* request, ::grpc::ClientReadReactor< ::helmsley::volumeWholeResponse>* reactor) = 0;
      #else
      virtual void DownloadVolume(::grpc::ClientContext* context, ::helmsley::RequestWholeVolume* request, ::grpc::experimental::ClientReadReactor< ::helmsley::volumeWholeResponse>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DownloadMasks(::grpc::ClientContext* context, ::Request* request, ::grpc::ClientReadReactor< ::helmsley::dcmImage>* reactor) = 0;
      #else
      virtual void DownloadMasks(::grpc::ClientContext* context, ::Request* request, ::grpc::experimental::ClientReadReactor< ::helmsley::dcmImage>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DownloadMasksVolume(::grpc::ClientContext* context, ::Request* request, ::grpc::ClientReadReactor< ::helmsley::volumeWholeResponse>* reactor) = 0;
      #else
      virtual void DownloadMasksVolume(::grpc::ClientContext* context, ::Request* request, ::grpc::experimental::ClientReadReactor< ::helmsley::volumeWholeResponse>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DownloadCenterLineData(::grpc::ClientContext* context, ::Request* request, ::grpc::ClientReadReactor< ::helmsley::centerlineData>* reactor) = 0;
      #else
      virtual void DownloadCenterLineData(::grpc::ClientContext* context, ::Request* request, ::grpc::experimental::ClientReadReactor< ::helmsley::centerlineData>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helmsley::configResponse>* AsyncgetAvailableConfigsRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helmsley::configResponse>* PrepareAsyncgetAvailableConfigsRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::commonResponse>* AsyncexportConfigsRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::commonResponse>* PrepareAsyncexportConfigsRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helmsley::datasetResponse>* AsyncgetAvailableDatasetsRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helmsley::datasetResponse>* PrepareAsyncgetAvailableDatasetsRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::helmsley::volumeResponse>* getVolumeFromDatasetRaw(::grpc::ClientContext* context, const ::Request& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::helmsley::volumeResponse>* AsyncgetVolumeFromDatasetRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::helmsley::volumeResponse>* PrepareAsyncgetVolumeFromDatasetRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::helmsley::dcmImage>* DownloadRaw(::grpc::ClientContext* context, const ::Request& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::helmsley::dcmImage>* AsyncDownloadRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::helmsley::dcmImage>* PrepareAsyncDownloadRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::helmsley::volumeWholeResponse>* DownloadVolumeRaw(::grpc::ClientContext* context, const ::helmsley::RequestWholeVolume& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::helmsley::volumeWholeResponse>* AsyncDownloadVolumeRaw(::grpc::ClientContext* context, const ::helmsley::RequestWholeVolume& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::helmsley::volumeWholeResponse>* PrepareAsyncDownloadVolumeRaw(::grpc::ClientContext* context, const ::helmsley::RequestWholeVolume& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::helmsley::dcmImage>* DownloadMasksRaw(::grpc::ClientContext* context, const ::Request& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::helmsley::dcmImage>* AsyncDownloadMasksRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::helmsley::dcmImage>* PrepareAsyncDownloadMasksRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::helmsley::volumeWholeResponse>* DownloadMasksVolumeRaw(::grpc::ClientContext* context, const ::Request& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::helmsley::volumeWholeResponse>* AsyncDownloadMasksVolumeRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::helmsley::volumeWholeResponse>* PrepareAsyncDownloadMasksVolumeRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::helmsley::centerlineData>* DownloadCenterLineDataRaw(::grpc::ClientContext* context, const ::Request& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::helmsley::centerlineData>* AsyncDownloadCenterLineDataRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::helmsley::centerlineData>* PrepareAsyncDownloadCenterLineDataRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status getAvailableConfigs(::grpc::ClientContext* context, const ::Request& request, ::helmsley::configResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helmsley::configResponse>> AsyncgetAvailableConfigs(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helmsley::configResponse>>(AsyncgetAvailableConfigsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helmsley::configResponse>> PrepareAsyncgetAvailableConfigs(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helmsley::configResponse>>(PrepareAsyncgetAvailableConfigsRaw(context, request, cq));
    }
    ::grpc::Status exportConfigs(::grpc::ClientContext* context, const ::Request& request, ::commonResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commonResponse>> AsyncexportConfigs(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commonResponse>>(AsyncexportConfigsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commonResponse>> PrepareAsyncexportConfigs(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commonResponse>>(PrepareAsyncexportConfigsRaw(context, request, cq));
    }
    ::grpc::Status getAvailableDatasets(::grpc::ClientContext* context, const ::Request& request, ::helmsley::datasetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helmsley::datasetResponse>> AsyncgetAvailableDatasets(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helmsley::datasetResponse>>(AsyncgetAvailableDatasetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helmsley::datasetResponse>> PrepareAsyncgetAvailableDatasets(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helmsley::datasetResponse>>(PrepareAsyncgetAvailableDatasetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::helmsley::volumeResponse>> getVolumeFromDataset(::grpc::ClientContext* context, const ::Request& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::helmsley::volumeResponse>>(getVolumeFromDatasetRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::helmsley::volumeResponse>> AsyncgetVolumeFromDataset(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::helmsley::volumeResponse>>(AsyncgetVolumeFromDatasetRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::helmsley::volumeResponse>> PrepareAsyncgetVolumeFromDataset(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::helmsley::volumeResponse>>(PrepareAsyncgetVolumeFromDatasetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::helmsley::dcmImage>> Download(::grpc::ClientContext* context, const ::Request& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::helmsley::dcmImage>>(DownloadRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::helmsley::dcmImage>> AsyncDownload(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::helmsley::dcmImage>>(AsyncDownloadRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::helmsley::dcmImage>> PrepareAsyncDownload(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::helmsley::dcmImage>>(PrepareAsyncDownloadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::helmsley::volumeWholeResponse>> DownloadVolume(::grpc::ClientContext* context, const ::helmsley::RequestWholeVolume& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::helmsley::volumeWholeResponse>>(DownloadVolumeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::helmsley::volumeWholeResponse>> AsyncDownloadVolume(::grpc::ClientContext* context, const ::helmsley::RequestWholeVolume& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::helmsley::volumeWholeResponse>>(AsyncDownloadVolumeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::helmsley::volumeWholeResponse>> PrepareAsyncDownloadVolume(::grpc::ClientContext* context, const ::helmsley::RequestWholeVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::helmsley::volumeWholeResponse>>(PrepareAsyncDownloadVolumeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::helmsley::dcmImage>> DownloadMasks(::grpc::ClientContext* context, const ::Request& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::helmsley::dcmImage>>(DownloadMasksRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::helmsley::dcmImage>> AsyncDownloadMasks(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::helmsley::dcmImage>>(AsyncDownloadMasksRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::helmsley::dcmImage>> PrepareAsyncDownloadMasks(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::helmsley::dcmImage>>(PrepareAsyncDownloadMasksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::helmsley::volumeWholeResponse>> DownloadMasksVolume(::grpc::ClientContext* context, const ::Request& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::helmsley::volumeWholeResponse>>(DownloadMasksVolumeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::helmsley::volumeWholeResponse>> AsyncDownloadMasksVolume(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::helmsley::volumeWholeResponse>>(AsyncDownloadMasksVolumeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::helmsley::volumeWholeResponse>> PrepareAsyncDownloadMasksVolume(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::helmsley::volumeWholeResponse>>(PrepareAsyncDownloadMasksVolumeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::helmsley::centerlineData>> DownloadCenterLineData(::grpc::ClientContext* context, const ::Request& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::helmsley::centerlineData>>(DownloadCenterLineDataRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::helmsley::centerlineData>> AsyncDownloadCenterLineData(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::helmsley::centerlineData>>(AsyncDownloadCenterLineDataRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::helmsley::centerlineData>> PrepareAsyncDownloadCenterLineData(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::helmsley::centerlineData>>(PrepareAsyncDownloadCenterLineDataRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void getAvailableConfigs(::grpc::ClientContext* context, const ::Request* request, ::helmsley::configResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getAvailableConfigs(::grpc::ClientContext* context, const ::Request* request, ::helmsley::configResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getAvailableConfigs(::grpc::ClientContext* context, const ::Request* request, ::helmsley::configResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void exportConfigs(::grpc::ClientContext* context, const ::Request* request, ::commonResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void exportConfigs(::grpc::ClientContext* context, const ::Request* request, ::commonResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void exportConfigs(::grpc::ClientContext* context, const ::Request* request, ::commonResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getAvailableDatasets(::grpc::ClientContext* context, const ::Request* request, ::helmsley::datasetResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getAvailableDatasets(::grpc::ClientContext* context, const ::Request* request, ::helmsley::datasetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getAvailableDatasets(::grpc::ClientContext* context, const ::Request* request, ::helmsley::datasetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getVolumeFromDataset(::grpc::ClientContext* context, ::Request* request, ::grpc::ClientReadReactor< ::helmsley::volumeResponse>* reactor) override;
      #else
      void getVolumeFromDataset(::grpc::ClientContext* context, ::Request* request, ::grpc::experimental::ClientReadReactor< ::helmsley::volumeResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Download(::grpc::ClientContext* context, ::Request* request, ::grpc::ClientReadReactor< ::helmsley::dcmImage>* reactor) override;
      #else
      void Download(::grpc::ClientContext* context, ::Request* request, ::grpc::experimental::ClientReadReactor< ::helmsley::dcmImage>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DownloadVolume(::grpc::ClientContext* context, ::helmsley::RequestWholeVolume* request, ::grpc::ClientReadReactor< ::helmsley::volumeWholeResponse>* reactor) override;
      #else
      void DownloadVolume(::grpc::ClientContext* context, ::helmsley::RequestWholeVolume* request, ::grpc::experimental::ClientReadReactor< ::helmsley::volumeWholeResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DownloadMasks(::grpc::ClientContext* context, ::Request* request, ::grpc::ClientReadReactor< ::helmsley::dcmImage>* reactor) override;
      #else
      void DownloadMasks(::grpc::ClientContext* context, ::Request* request, ::grpc::experimental::ClientReadReactor< ::helmsley::dcmImage>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DownloadMasksVolume(::grpc::ClientContext* context, ::Request* request, ::grpc::ClientReadReactor< ::helmsley::volumeWholeResponse>* reactor) override;
      #else
      void DownloadMasksVolume(::grpc::ClientContext* context, ::Request* request, ::grpc::experimental::ClientReadReactor< ::helmsley::volumeWholeResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DownloadCenterLineData(::grpc::ClientContext* context, ::Request* request, ::grpc::ClientReadReactor< ::helmsley::centerlineData>* reactor) override;
      #else
      void DownloadCenterLineData(::grpc::ClientContext* context, ::Request* request, ::grpc::experimental::ClientReadReactor< ::helmsley::centerlineData>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::helmsley::configResponse>* AsyncgetAvailableConfigsRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::helmsley::configResponse>* PrepareAsyncgetAvailableConfigsRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::commonResponse>* AsyncexportConfigsRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::commonResponse>* PrepareAsyncexportConfigsRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::helmsley::datasetResponse>* AsyncgetAvailableDatasetsRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::helmsley::datasetResponse>* PrepareAsyncgetAvailableDatasetsRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::helmsley::volumeResponse>* getVolumeFromDatasetRaw(::grpc::ClientContext* context, const ::Request& request) override;
    ::grpc::ClientAsyncReader< ::helmsley::volumeResponse>* AsyncgetVolumeFromDatasetRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::helmsley::volumeResponse>* PrepareAsyncgetVolumeFromDatasetRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::helmsley::dcmImage>* DownloadRaw(::grpc::ClientContext* context, const ::Request& request) override;
    ::grpc::ClientAsyncReader< ::helmsley::dcmImage>* AsyncDownloadRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::helmsley::dcmImage>* PrepareAsyncDownloadRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::helmsley::volumeWholeResponse>* DownloadVolumeRaw(::grpc::ClientContext* context, const ::helmsley::RequestWholeVolume& request) override;
    ::grpc::ClientAsyncReader< ::helmsley::volumeWholeResponse>* AsyncDownloadVolumeRaw(::grpc::ClientContext* context, const ::helmsley::RequestWholeVolume& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::helmsley::volumeWholeResponse>* PrepareAsyncDownloadVolumeRaw(::grpc::ClientContext* context, const ::helmsley::RequestWholeVolume& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::helmsley::dcmImage>* DownloadMasksRaw(::grpc::ClientContext* context, const ::Request& request) override;
    ::grpc::ClientAsyncReader< ::helmsley::dcmImage>* AsyncDownloadMasksRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::helmsley::dcmImage>* PrepareAsyncDownloadMasksRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::helmsley::volumeWholeResponse>* DownloadMasksVolumeRaw(::grpc::ClientContext* context, const ::Request& request) override;
    ::grpc::ClientAsyncReader< ::helmsley::volumeWholeResponse>* AsyncDownloadMasksVolumeRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::helmsley::volumeWholeResponse>* PrepareAsyncDownloadMasksVolumeRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::helmsley::centerlineData>* DownloadCenterLineDataRaw(::grpc::ClientContext* context, const ::Request& request) override;
    ::grpc::ClientAsyncReader< ::helmsley::centerlineData>* AsyncDownloadCenterLineDataRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::helmsley::centerlineData>* PrepareAsyncDownloadCenterLineDataRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_getAvailableConfigs_;
    const ::grpc::internal::RpcMethod rpcmethod_exportConfigs_;
    const ::grpc::internal::RpcMethod rpcmethod_getAvailableDatasets_;
    const ::grpc::internal::RpcMethod rpcmethod_getVolumeFromDataset_;
    const ::grpc::internal::RpcMethod rpcmethod_Download_;
    const ::grpc::internal::RpcMethod rpcmethod_DownloadVolume_;
    const ::grpc::internal::RpcMethod rpcmethod_DownloadMasks_;
    const ::grpc::internal::RpcMethod rpcmethod_DownloadMasksVolume_;
    const ::grpc::internal::RpcMethod rpcmethod_DownloadCenterLineData_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status getAvailableConfigs(::grpc::ServerContext* context, const ::Request* request, ::helmsley::configResponse* response);
    virtual ::grpc::Status exportConfigs(::grpc::ServerContext* context, const ::Request* request, ::commonResponse* response);
    virtual ::grpc::Status getAvailableDatasets(::grpc::ServerContext* context, const ::Request* request, ::helmsley::datasetResponse* response);
    virtual ::grpc::Status getVolumeFromDataset(::grpc::ServerContext* context, const ::Request* request, ::grpc::ServerWriter< ::helmsley::volumeResponse>* writer);
    virtual ::grpc::Status Download(::grpc::ServerContext* context, const ::Request* request, ::grpc::ServerWriter< ::helmsley::dcmImage>* writer);
    virtual ::grpc::Status DownloadVolume(::grpc::ServerContext* context, const ::helmsley::RequestWholeVolume* request, ::grpc::ServerWriter< ::helmsley::volumeWholeResponse>* writer);
    virtual ::grpc::Status DownloadMasks(::grpc::ServerContext* context, const ::Request* request, ::grpc::ServerWriter< ::helmsley::dcmImage>* writer);
    virtual ::grpc::Status DownloadMasksVolume(::grpc::ServerContext* context, const ::Request* request, ::grpc::ServerWriter< ::helmsley::volumeWholeResponse>* writer);
    virtual ::grpc::Status DownloadCenterLineData(::grpc::ServerContext* context, const ::Request* request, ::grpc::ServerWriter< ::helmsley::centerlineData>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_getAvailableConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getAvailableConfigs() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getAvailableConfigs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAvailableConfigs(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::helmsley::configResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAvailableConfigs(::grpc::ServerContext* context, ::Request* request, ::grpc::ServerAsyncResponseWriter< ::helmsley::configResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_exportConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_exportConfigs() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_exportConfigs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exportConfigs(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::commonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestexportConfigs(::grpc::ServerContext* context, ::Request* request, ::grpc::ServerAsyncResponseWriter< ::commonResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getAvailableDatasets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getAvailableDatasets() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getAvailableDatasets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAvailableDatasets(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::helmsley::datasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAvailableDatasets(::grpc::ServerContext* context, ::Request* request, ::grpc::ServerAsyncResponseWriter< ::helmsley::datasetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getVolumeFromDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getVolumeFromDataset() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_getVolumeFromDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVolumeFromDataset(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::grpc::ServerWriter< ::helmsley::volumeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetVolumeFromDataset(::grpc::ServerContext* context, ::Request* request, ::grpc::ServerAsyncWriter< ::helmsley::volumeResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Download() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Download(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::grpc::ServerWriter< ::helmsley::dcmImage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownload(::grpc::ServerContext* context, ::Request* request, ::grpc::ServerAsyncWriter< ::helmsley::dcmImage>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DownloadVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DownloadVolume() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_DownloadVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadVolume(::grpc::ServerContext* /*context*/, const ::helmsley::RequestWholeVolume* /*request*/, ::grpc::ServerWriter< ::helmsley::volumeWholeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadVolume(::grpc::ServerContext* context, ::helmsley::RequestWholeVolume* request, ::grpc::ServerAsyncWriter< ::helmsley::volumeWholeResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DownloadMasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DownloadMasks() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_DownloadMasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadMasks(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::grpc::ServerWriter< ::helmsley::dcmImage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadMasks(::grpc::ServerContext* context, ::Request* request, ::grpc::ServerAsyncWriter< ::helmsley::dcmImage>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DownloadMasksVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DownloadMasksVolume() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_DownloadMasksVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadMasksVolume(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::grpc::ServerWriter< ::helmsley::volumeWholeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadMasksVolume(::grpc::ServerContext* context, ::Request* request, ::grpc::ServerAsyncWriter< ::helmsley::volumeWholeResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DownloadCenterLineData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DownloadCenterLineData() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_DownloadCenterLineData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadCenterLineData(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::grpc::ServerWriter< ::helmsley::centerlineData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadCenterLineData(::grpc::ServerContext* context, ::Request* request, ::grpc::ServerAsyncWriter< ::helmsley::centerlineData>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(8, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getAvailableConfigs<WithAsyncMethod_exportConfigs<WithAsyncMethod_getAvailableDatasets<WithAsyncMethod_getVolumeFromDataset<WithAsyncMethod_Download<WithAsyncMethod_DownloadVolume<WithAsyncMethod_DownloadMasks<WithAsyncMethod_DownloadMasksVolume<WithAsyncMethod_DownloadCenterLineData<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getAvailableConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getAvailableConfigs() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Request, ::helmsley::configResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Request* request, ::helmsley::configResponse* response) { return this->getAvailableConfigs(context, request, response); }));}
    void SetMessageAllocatorFor_getAvailableConfigs(
        ::grpc::experimental::MessageAllocator< ::Request, ::helmsley::configResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Request, ::helmsley::configResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getAvailableConfigs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAvailableConfigs(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::helmsley::configResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getAvailableConfigs(
      ::grpc::CallbackServerContext* /*context*/, const ::Request* /*request*/, ::helmsley::configResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getAvailableConfigs(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Request* /*request*/, ::helmsley::configResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_exportConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_exportConfigs() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::Request, ::commonResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Request* request, ::commonResponse* response) { return this->exportConfigs(context, request, response); }));}
    void SetMessageAllocatorFor_exportConfigs(
        ::grpc::experimental::MessageAllocator< ::Request, ::commonResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Request, ::commonResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_exportConfigs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exportConfigs(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::commonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* exportConfigs(
      ::grpc::CallbackServerContext* /*context*/, const ::Request* /*request*/, ::commonResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* exportConfigs(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Request* /*request*/, ::commonResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getAvailableDatasets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getAvailableDatasets() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::Request, ::helmsley::datasetResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Request* request, ::helmsley::datasetResponse* response) { return this->getAvailableDatasets(context, request, response); }));}
    void SetMessageAllocatorFor_getAvailableDatasets(
        ::grpc::experimental::MessageAllocator< ::Request, ::helmsley::datasetResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Request, ::helmsley::datasetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getAvailableDatasets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAvailableDatasets(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::helmsley::datasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getAvailableDatasets(
      ::grpc::CallbackServerContext* /*context*/, const ::Request* /*request*/, ::helmsley::datasetResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getAvailableDatasets(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Request* /*request*/, ::helmsley::datasetResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getVolumeFromDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getVolumeFromDataset() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::Request, ::helmsley::volumeResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Request* request) { return this->getVolumeFromDataset(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_getVolumeFromDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVolumeFromDataset(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::grpc::ServerWriter< ::helmsley::volumeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::helmsley::volumeResponse>* getVolumeFromDataset(
      ::grpc::CallbackServerContext* /*context*/, const ::Request* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::helmsley::volumeResponse>* getVolumeFromDataset(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Request* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Download() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::Request, ::helmsley::dcmImage>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Request* request) { return this->Download(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_Download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Download(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::grpc::ServerWriter< ::helmsley::dcmImage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::helmsley::dcmImage>* Download(
      ::grpc::CallbackServerContext* /*context*/, const ::Request* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::helmsley::dcmImage>* Download(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Request* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DownloadVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DownloadVolume() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::helmsley::RequestWholeVolume, ::helmsley::volumeWholeResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::helmsley::RequestWholeVolume* request) { return this->DownloadVolume(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_DownloadVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadVolume(::grpc::ServerContext* /*context*/, const ::helmsley::RequestWholeVolume* /*request*/, ::grpc::ServerWriter< ::helmsley::volumeWholeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::helmsley::volumeWholeResponse>* DownloadVolume(
      ::grpc::CallbackServerContext* /*context*/, const ::helmsley::RequestWholeVolume* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::helmsley::volumeWholeResponse>* DownloadVolume(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::helmsley::RequestWholeVolume* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DownloadMasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DownloadMasks() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::Request, ::helmsley::dcmImage>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Request* request) { return this->DownloadMasks(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_DownloadMasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadMasks(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::grpc::ServerWriter< ::helmsley::dcmImage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::helmsley::dcmImage>* DownloadMasks(
      ::grpc::CallbackServerContext* /*context*/, const ::Request* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::helmsley::dcmImage>* DownloadMasks(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Request* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DownloadMasksVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DownloadMasksVolume() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc::internal::CallbackServerStreamingHandler< ::Request, ::helmsley::volumeWholeResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Request* request) { return this->DownloadMasksVolume(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_DownloadMasksVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadMasksVolume(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::grpc::ServerWriter< ::helmsley::volumeWholeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::helmsley::volumeWholeResponse>* DownloadMasksVolume(
      ::grpc::CallbackServerContext* /*context*/, const ::Request* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::helmsley::volumeWholeResponse>* DownloadMasksVolume(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Request* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DownloadCenterLineData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DownloadCenterLineData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc::internal::CallbackServerStreamingHandler< ::Request, ::helmsley::centerlineData>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Request* request) { return this->DownloadCenterLineData(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_DownloadCenterLineData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadCenterLineData(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::grpc::ServerWriter< ::helmsley::centerlineData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::helmsley::centerlineData>* DownloadCenterLineData(
      ::grpc::CallbackServerContext* /*context*/, const ::Request* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::helmsley::centerlineData>* DownloadCenterLineData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Request* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_getAvailableConfigs<ExperimentalWithCallbackMethod_exportConfigs<ExperimentalWithCallbackMethod_getAvailableDatasets<ExperimentalWithCallbackMethod_getVolumeFromDataset<ExperimentalWithCallbackMethod_Download<ExperimentalWithCallbackMethod_DownloadVolume<ExperimentalWithCallbackMethod_DownloadMasks<ExperimentalWithCallbackMethod_DownloadMasksVolume<ExperimentalWithCallbackMethod_DownloadCenterLineData<Service > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_getAvailableConfigs<ExperimentalWithCallbackMethod_exportConfigs<ExperimentalWithCallbackMethod_getAvailableDatasets<ExperimentalWithCallbackMethod_getVolumeFromDataset<ExperimentalWithCallbackMethod_Download<ExperimentalWithCallbackMethod_DownloadVolume<ExperimentalWithCallbackMethod_DownloadMasks<ExperimentalWithCallbackMethod_DownloadMasksVolume<ExperimentalWithCallbackMethod_DownloadCenterLineData<Service > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_getAvailableConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getAvailableConfigs() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getAvailableConfigs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAvailableConfigs(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::helmsley::configResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_exportConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_exportConfigs() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_exportConfigs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exportConfigs(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::commonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getAvailableDatasets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getAvailableDatasets() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getAvailableDatasets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAvailableDatasets(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::helmsley::datasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getVolumeFromDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getVolumeFromDataset() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_getVolumeFromDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVolumeFromDataset(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::grpc::ServerWriter< ::helmsley::volumeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Download() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Download(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::grpc::ServerWriter< ::helmsley::dcmImage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DownloadVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DownloadVolume() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_DownloadVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadVolume(::grpc::ServerContext* /*context*/, const ::helmsley::RequestWholeVolume* /*request*/, ::grpc::ServerWriter< ::helmsley::volumeWholeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DownloadMasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DownloadMasks() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_DownloadMasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadMasks(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::grpc::ServerWriter< ::helmsley::dcmImage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DownloadMasksVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DownloadMasksVolume() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_DownloadMasksVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadMasksVolume(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::grpc::ServerWriter< ::helmsley::volumeWholeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DownloadCenterLineData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DownloadCenterLineData() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_DownloadCenterLineData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadCenterLineData(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::grpc::ServerWriter< ::helmsley::centerlineData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_getAvailableConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getAvailableConfigs() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_getAvailableConfigs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAvailableConfigs(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::helmsley::configResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAvailableConfigs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_exportConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_exportConfigs() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_exportConfigs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exportConfigs(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::commonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestexportConfigs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getAvailableDatasets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getAvailableDatasets() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getAvailableDatasets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAvailableDatasets(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::helmsley::datasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAvailableDatasets(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getVolumeFromDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getVolumeFromDataset() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_getVolumeFromDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVolumeFromDataset(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::grpc::ServerWriter< ::helmsley::volumeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetVolumeFromDataset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Download() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Download(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::grpc::ServerWriter< ::helmsley::dcmImage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownload(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DownloadVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DownloadVolume() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_DownloadVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadVolume(::grpc::ServerContext* /*context*/, const ::helmsley::RequestWholeVolume* /*request*/, ::grpc::ServerWriter< ::helmsley::volumeWholeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadVolume(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DownloadMasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DownloadMasks() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_DownloadMasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadMasks(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::grpc::ServerWriter< ::helmsley::dcmImage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadMasks(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DownloadMasksVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DownloadMasksVolume() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_DownloadMasksVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadMasksVolume(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::grpc::ServerWriter< ::helmsley::volumeWholeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadMasksVolume(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DownloadCenterLineData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DownloadCenterLineData() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_DownloadCenterLineData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadCenterLineData(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::grpc::ServerWriter< ::helmsley::centerlineData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadCenterLineData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(8, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getAvailableConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getAvailableConfigs() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getAvailableConfigs(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getAvailableConfigs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAvailableConfigs(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::helmsley::configResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getAvailableConfigs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getAvailableConfigs(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_exportConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_exportConfigs() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->exportConfigs(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_exportConfigs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exportConfigs(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::commonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* exportConfigs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* exportConfigs(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getAvailableDatasets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getAvailableDatasets() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getAvailableDatasets(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getAvailableDatasets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAvailableDatasets(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::helmsley::datasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getAvailableDatasets(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getAvailableDatasets(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getVolumeFromDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getVolumeFromDataset() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->getVolumeFromDataset(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_getVolumeFromDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVolumeFromDataset(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::grpc::ServerWriter< ::helmsley::volumeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* getVolumeFromDataset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* getVolumeFromDataset(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Download() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->Download(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_Download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Download(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::grpc::ServerWriter< ::helmsley::dcmImage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Download(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* Download(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DownloadVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DownloadVolume() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->DownloadVolume(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_DownloadVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadVolume(::grpc::ServerContext* /*context*/, const ::helmsley::RequestWholeVolume* /*request*/, ::grpc::ServerWriter< ::helmsley::volumeWholeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* DownloadVolume(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* DownloadVolume(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DownloadMasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DownloadMasks() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->DownloadMasks(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_DownloadMasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadMasks(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::grpc::ServerWriter< ::helmsley::dcmImage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* DownloadMasks(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* DownloadMasks(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DownloadMasksVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DownloadMasksVolume() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->DownloadMasksVolume(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_DownloadMasksVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadMasksVolume(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::grpc::ServerWriter< ::helmsley::volumeWholeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* DownloadMasksVolume(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* DownloadMasksVolume(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DownloadCenterLineData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DownloadCenterLineData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->DownloadCenterLineData(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_DownloadCenterLineData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadCenterLineData(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::grpc::ServerWriter< ::helmsley::centerlineData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* DownloadCenterLineData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* DownloadCenterLineData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getAvailableConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getAvailableConfigs() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Request, ::helmsley::configResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Request, ::helmsley::configResponse>* streamer) {
                       return this->StreamedgetAvailableConfigs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getAvailableConfigs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getAvailableConfigs(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::helmsley::configResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetAvailableConfigs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Request,::helmsley::configResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_exportConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_exportConfigs() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Request, ::commonResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Request, ::commonResponse>* streamer) {
                       return this->StreamedexportConfigs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_exportConfigs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status exportConfigs(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::commonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedexportConfigs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Request,::commonResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getAvailableDatasets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getAvailableDatasets() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Request, ::helmsley::datasetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Request, ::helmsley::datasetResponse>* streamer) {
                       return this->StreamedgetAvailableDatasets(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getAvailableDatasets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getAvailableDatasets(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::helmsley::datasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetAvailableDatasets(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Request,::helmsley::datasetResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_getAvailableConfigs<WithStreamedUnaryMethod_exportConfigs<WithStreamedUnaryMethod_getAvailableDatasets<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_getVolumeFromDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_getVolumeFromDataset() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::Request, ::helmsley::volumeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::Request, ::helmsley::volumeResponse>* streamer) {
                       return this->StreamedgetVolumeFromDataset(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_getVolumeFromDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getVolumeFromDataset(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::grpc::ServerWriter< ::helmsley::volumeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedgetVolumeFromDataset(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::Request,::helmsley::volumeResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_Download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Download() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::Request, ::helmsley::dcmImage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::Request, ::helmsley::dcmImage>* streamer) {
                       return this->StreamedDownload(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Download(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::grpc::ServerWriter< ::helmsley::dcmImage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedDownload(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::Request,::helmsley::dcmImage>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_DownloadVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_DownloadVolume() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::helmsley::RequestWholeVolume, ::helmsley::volumeWholeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::helmsley::RequestWholeVolume, ::helmsley::volumeWholeResponse>* streamer) {
                       return this->StreamedDownloadVolume(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_DownloadVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DownloadVolume(::grpc::ServerContext* /*context*/, const ::helmsley::RequestWholeVolume* /*request*/, ::grpc::ServerWriter< ::helmsley::volumeWholeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedDownloadVolume(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::helmsley::RequestWholeVolume,::helmsley::volumeWholeResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_DownloadMasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_DownloadMasks() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::Request, ::helmsley::dcmImage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::Request, ::helmsley::dcmImage>* streamer) {
                       return this->StreamedDownloadMasks(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_DownloadMasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DownloadMasks(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::grpc::ServerWriter< ::helmsley::dcmImage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedDownloadMasks(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::Request,::helmsley::dcmImage>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_DownloadMasksVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_DownloadMasksVolume() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::Request, ::helmsley::volumeWholeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::Request, ::helmsley::volumeWholeResponse>* streamer) {
                       return this->StreamedDownloadMasksVolume(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_DownloadMasksVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DownloadMasksVolume(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::grpc::ServerWriter< ::helmsley::volumeWholeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedDownloadMasksVolume(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::Request,::helmsley::volumeWholeResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_DownloadCenterLineData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_DownloadCenterLineData() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::Request, ::helmsley::centerlineData>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::Request, ::helmsley::centerlineData>* streamer) {
                       return this->StreamedDownloadCenterLineData(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_DownloadCenterLineData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DownloadCenterLineData(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::grpc::ServerWriter< ::helmsley::centerlineData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedDownloadCenterLineData(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::Request,::helmsley::centerlineData>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_getVolumeFromDataset<WithSplitStreamingMethod_Download<WithSplitStreamingMethod_DownloadVolume<WithSplitStreamingMethod_DownloadMasks<WithSplitStreamingMethod_DownloadMasksVolume<WithSplitStreamingMethod_DownloadCenterLineData<Service > > > > > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_getAvailableConfigs<WithStreamedUnaryMethod_exportConfigs<WithStreamedUnaryMethod_getAvailableDatasets<WithSplitStreamingMethod_getVolumeFromDataset<WithSplitStreamingMethod_Download<WithSplitStreamingMethod_DownloadVolume<WithSplitStreamingMethod_DownloadMasks<WithSplitStreamingMethod_DownloadMasksVolume<WithSplitStreamingMethod_DownloadCenterLineData<Service > > > > > > > > > StreamedService;
};

}  // namespace helmsley


#endif  // GRPC_transManager_2eproto__INCLUDED
