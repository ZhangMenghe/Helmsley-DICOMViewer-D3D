// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transManager.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transManager_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transManager_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transManager_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transManager_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transManager_2eproto;
namespace helmsley {
class RequestWholeVolume;
class RequestWholeVolumeDefaultTypeInternal;
extern RequestWholeVolumeDefaultTypeInternal _RequestWholeVolume_default_instance_;
class centerlineData;
class centerlineDataDefaultTypeInternal;
extern centerlineDataDefaultTypeInternal _centerlineData_default_instance_;
class configResponse;
class configResponseDefaultTypeInternal;
extern configResponseDefaultTypeInternal _configResponse_default_instance_;
class configResponse_configInfo;
class configResponse_configInfoDefaultTypeInternal;
extern configResponse_configInfoDefaultTypeInternal _configResponse_configInfo_default_instance_;
class datasetResponse;
class datasetResponseDefaultTypeInternal;
extern datasetResponseDefaultTypeInternal _datasetResponse_default_instance_;
class datasetResponse_datasetInfo;
class datasetResponse_datasetInfoDefaultTypeInternal;
extern datasetResponse_datasetInfoDefaultTypeInternal _datasetResponse_datasetInfo_default_instance_;
class dcmImage;
class dcmImageDefaultTypeInternal;
extern dcmImageDefaultTypeInternal _dcmImage_default_instance_;
class scoreInfo;
class scoreInfoDefaultTypeInternal;
extern scoreInfoDefaultTypeInternal _scoreInfo_default_instance_;
class volumeInfo;
class volumeInfoDefaultTypeInternal;
extern volumeInfoDefaultTypeInternal _volumeInfo_default_instance_;
class volumeResponse;
class volumeResponseDefaultTypeInternal;
extern volumeResponseDefaultTypeInternal _volumeResponse_default_instance_;
class volumeWholeResponse;
class volumeWholeResponseDefaultTypeInternal;
extern volumeWholeResponseDefaultTypeInternal _volumeWholeResponse_default_instance_;
}  // namespace helmsley
PROTOBUF_NAMESPACE_OPEN
template<> ::helmsley::RequestWholeVolume* Arena::CreateMaybeMessage<::helmsley::RequestWholeVolume>(Arena*);
template<> ::helmsley::centerlineData* Arena::CreateMaybeMessage<::helmsley::centerlineData>(Arena*);
template<> ::helmsley::configResponse* Arena::CreateMaybeMessage<::helmsley::configResponse>(Arena*);
template<> ::helmsley::configResponse_configInfo* Arena::CreateMaybeMessage<::helmsley::configResponse_configInfo>(Arena*);
template<> ::helmsley::datasetResponse* Arena::CreateMaybeMessage<::helmsley::datasetResponse>(Arena*);
template<> ::helmsley::datasetResponse_datasetInfo* Arena::CreateMaybeMessage<::helmsley::datasetResponse_datasetInfo>(Arena*);
template<> ::helmsley::dcmImage* Arena::CreateMaybeMessage<::helmsley::dcmImage>(Arena*);
template<> ::helmsley::scoreInfo* Arena::CreateMaybeMessage<::helmsley::scoreInfo>(Arena*);
template<> ::helmsley::volumeInfo* Arena::CreateMaybeMessage<::helmsley::volumeInfo>(Arena*);
template<> ::helmsley::volumeResponse* Arena::CreateMaybeMessage<::helmsley::volumeResponse>(Arena*);
template<> ::helmsley::volumeWholeResponse* Arena::CreateMaybeMessage<::helmsley::volumeWholeResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace helmsley {

enum volumeInfo_DataSource : int {
  volumeInfo_DataSource_LOCAL = 0,
  volumeInfo_DataSource_SERVER = 1,
  volumeInfo_DataSource_DEVICE = 2,
  volumeInfo_DataSource_volumeInfo_DataSource_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  volumeInfo_DataSource_volumeInfo_DataSource_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool volumeInfo_DataSource_IsValid(int value);
constexpr volumeInfo_DataSource volumeInfo_DataSource_DataSource_MIN = volumeInfo_DataSource_LOCAL;
constexpr volumeInfo_DataSource volumeInfo_DataSource_DataSource_MAX = volumeInfo_DataSource_DEVICE;
constexpr int volumeInfo_DataSource_DataSource_ARRAYSIZE = volumeInfo_DataSource_DataSource_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* volumeInfo_DataSource_descriptor();
template<typename T>
inline const std::string& volumeInfo_DataSource_Name(T enum_t_value) {
  static_assert(::std::is_same<T, volumeInfo_DataSource>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function volumeInfo_DataSource_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    volumeInfo_DataSource_descriptor(), enum_t_value);
}
inline bool volumeInfo_DataSource_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, volumeInfo_DataSource* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<volumeInfo_DataSource>(
    volumeInfo_DataSource_descriptor(), name, value);
}
// ===================================================================

class configResponse_configInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:helmsley.configResponse.configInfo) */ {
 public:
  inline configResponse_configInfo() : configResponse_configInfo(nullptr) {}
  virtual ~configResponse_configInfo();

  configResponse_configInfo(const configResponse_configInfo& from);
  configResponse_configInfo(configResponse_configInfo&& from) noexcept
    : configResponse_configInfo() {
    *this = ::std::move(from);
  }

  inline configResponse_configInfo& operator=(const configResponse_configInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline configResponse_configInfo& operator=(configResponse_configInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const configResponse_configInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const configResponse_configInfo* internal_default_instance() {
    return reinterpret_cast<const configResponse_configInfo*>(
               &_configResponse_configInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(configResponse_configInfo& a, configResponse_configInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(configResponse_configInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(configResponse_configInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline configResponse_configInfo* New() const final {
    return CreateMaybeMessage<configResponse_configInfo>(nullptr);
  }

  configResponse_configInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<configResponse_configInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const configResponse_configInfo& from);
  void MergeFrom(const configResponse_configInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(configResponse_configInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "helmsley.configResponse.configInfo";
  }
  protected:
  explicit configResponse_configInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transManager_2eproto);
    return ::descriptor_table_transManager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
    kContentFieldNumber = 2,
  };
  // string file_name = 1;
  void clear_file_name();
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // string content = 2;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:helmsley.configResponse.configInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transManager_2eproto;
};
// -------------------------------------------------------------------

class configResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:helmsley.configResponse) */ {
 public:
  inline configResponse() : configResponse(nullptr) {}
  virtual ~configResponse();

  configResponse(const configResponse& from);
  configResponse(configResponse&& from) noexcept
    : configResponse() {
    *this = ::std::move(from);
  }

  inline configResponse& operator=(const configResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline configResponse& operator=(configResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const configResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const configResponse* internal_default_instance() {
    return reinterpret_cast<const configResponse*>(
               &_configResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(configResponse& a, configResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(configResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(configResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline configResponse* New() const final {
    return CreateMaybeMessage<configResponse>(nullptr);
  }

  configResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<configResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const configResponse& from);
  void MergeFrom(const configResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(configResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "helmsley.configResponse";
  }
  protected:
  explicit configResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transManager_2eproto);
    return ::descriptor_table_transManager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef configResponse_configInfo configInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kConfigsFieldNumber = 1,
  };
  // repeated .helmsley.configResponse.configInfo configs = 1;
  int configs_size() const;
  private:
  int _internal_configs_size() const;
  public:
  void clear_configs();
  ::helmsley::configResponse_configInfo* mutable_configs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::helmsley::configResponse_configInfo >*
      mutable_configs();
  private:
  const ::helmsley::configResponse_configInfo& _internal_configs(int index) const;
  ::helmsley::configResponse_configInfo* _internal_add_configs();
  public:
  const ::helmsley::configResponse_configInfo& configs(int index) const;
  ::helmsley::configResponse_configInfo* add_configs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::helmsley::configResponse_configInfo >&
      configs() const;

  // @@protoc_insertion_point(class_scope:helmsley.configResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::helmsley::configResponse_configInfo > configs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transManager_2eproto;
};
// -------------------------------------------------------------------

class scoreInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:helmsley.scoreInfo) */ {
 public:
  inline scoreInfo() : scoreInfo(nullptr) {}
  virtual ~scoreInfo();

  scoreInfo(const scoreInfo& from);
  scoreInfo(scoreInfo&& from) noexcept
    : scoreInfo() {
    *this = ::std::move(from);
  }

  inline scoreInfo& operator=(const scoreInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline scoreInfo& operator=(scoreInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const scoreInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const scoreInfo* internal_default_instance() {
    return reinterpret_cast<const scoreInfo*>(
               &_scoreInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(scoreInfo& a, scoreInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(scoreInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(scoreInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline scoreInfo* New() const final {
    return CreateMaybeMessage<scoreInfo>(nullptr);
  }

  scoreInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<scoreInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const scoreInfo& from);
  void MergeFrom(const scoreInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(scoreInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "helmsley.scoreInfo";
  }
  protected:
  explicit scoreInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transManager_2eproto);
    return ::descriptor_table_transManager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawScoreFieldNumber = 4,
    kVolScoreFieldNumber = 5,
    kRgroupIdFieldNumber = 1,
    kRankIdFieldNumber = 2,
    kRankScoreFieldNumber = 3,
  };
  // repeated float raw_score = 4;
  int raw_score_size() const;
  private:
  int _internal_raw_score_size() const;
  public:
  void clear_raw_score();
  private:
  float _internal_raw_score(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_raw_score() const;
  void _internal_add_raw_score(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_raw_score();
  public:
  float raw_score(int index) const;
  void set_raw_score(int index, float value);
  void add_raw_score(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      raw_score() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_raw_score();

  // repeated float vol_score = 5;
  int vol_score_size() const;
  private:
  int _internal_vol_score_size() const;
  public:
  void clear_vol_score();
  private:
  float _internal_vol_score(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_vol_score() const;
  void _internal_add_vol_score(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_vol_score();
  public:
  float vol_score(int index) const;
  void set_vol_score(int index, float value);
  void add_vol_score(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      vol_score() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_vol_score();

  // int32 rgroup_id = 1;
  void clear_rgroup_id();
  ::PROTOBUF_NAMESPACE_ID::int32 rgroup_id() const;
  void set_rgroup_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rgroup_id() const;
  void _internal_set_rgroup_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rank_id = 2;
  void clear_rank_id();
  ::PROTOBUF_NAMESPACE_ID::int32 rank_id() const;
  void set_rank_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rank_id() const;
  void _internal_set_rank_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float rank_score = 3;
  void clear_rank_score();
  float rank_score() const;
  void set_rank_score(float value);
  private:
  float _internal_rank_score() const;
  void _internal_set_rank_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:helmsley.scoreInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > raw_score_;
  mutable std::atomic<int> _raw_score_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > vol_score_;
  mutable std::atomic<int> _vol_score_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 rgroup_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 rank_id_;
  float rank_score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transManager_2eproto;
};
// -------------------------------------------------------------------

class volumeInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:helmsley.volumeInfo) */ {
 public:
  inline volumeInfo() : volumeInfo(nullptr) {}
  virtual ~volumeInfo();

  volumeInfo(const volumeInfo& from);
  volumeInfo(volumeInfo&& from) noexcept
    : volumeInfo() {
    *this = ::std::move(from);
  }

  inline volumeInfo& operator=(const volumeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline volumeInfo& operator=(volumeInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const volumeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const volumeInfo* internal_default_instance() {
    return reinterpret_cast<const volumeInfo*>(
               &_volumeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(volumeInfo& a, volumeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(volumeInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(volumeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline volumeInfo* New() const final {
    return CreateMaybeMessage<volumeInfo>(nullptr);
  }

  volumeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<volumeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const volumeInfo& from);
  void MergeFrom(const volumeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(volumeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "helmsley.volumeInfo";
  }
  protected:
  explicit volumeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transManager_2eproto);
    return ::descriptor_table_transManager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef volumeInfo_DataSource DataSource;
  static constexpr DataSource LOCAL =
    volumeInfo_DataSource_LOCAL;
  static constexpr DataSource SERVER =
    volumeInfo_DataSource_SERVER;
  static constexpr DataSource DEVICE =
    volumeInfo_DataSource_DEVICE;
  static inline bool DataSource_IsValid(int value) {
    return volumeInfo_DataSource_IsValid(value);
  }
  static constexpr DataSource DataSource_MIN =
    volumeInfo_DataSource_DataSource_MIN;
  static constexpr DataSource DataSource_MAX =
    volumeInfo_DataSource_DataSource_MAX;
  static constexpr int DataSource_ARRAYSIZE =
    volumeInfo_DataSource_DataSource_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DataSource_descriptor() {
    return volumeInfo_DataSource_descriptor();
  }
  template<typename T>
  static inline const std::string& DataSource_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DataSource>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DataSource_Name.");
    return volumeInfo_DataSource_Name(enum_t_value);
  }
  static inline bool DataSource_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DataSource* value) {
    return volumeInfo_DataSource_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDimsFieldNumber = 3,
    kOrientationFieldNumber = 4,
    kResolutionFieldNumber = 5,
    kFolderNameFieldNumber = 1,
    kFolderPathFieldNumber = 2,
    kSampleImgFieldNumber = 9,
    kScoresFieldNumber = 10,
    kVolumeLocRangeFieldNumber = 6,
    kWithMaskFieldNumber = 7,
    kDataSourceFieldNumber = 8,
  };
  // repeated int32 dims = 3;
  int dims_size() const;
  private:
  int _internal_dims_size() const;
  public:
  void clear_dims();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dims(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_dims() const;
  void _internal_add_dims(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_dims();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 dims(int index) const;
  void set_dims(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_dims(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      dims() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_dims();

  // repeated float orientation = 4;
  int orientation_size() const;
  private:
  int _internal_orientation_size() const;
  public:
  void clear_orientation();
  private:
  float _internal_orientation(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_orientation() const;
  void _internal_add_orientation(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_orientation();
  public:
  float orientation(int index) const;
  void set_orientation(int index, float value);
  void add_orientation(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      orientation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_orientation();

  // repeated float resolution = 5;
  int resolution_size() const;
  private:
  int _internal_resolution_size() const;
  public:
  void clear_resolution();
  private:
  float _internal_resolution(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_resolution() const;
  void _internal_add_resolution(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_resolution();
  public:
  float resolution(int index) const;
  void set_resolution(int index, float value);
  void add_resolution(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      resolution() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_resolution();

  // string folder_name = 1;
  void clear_folder_name();
  const std::string& folder_name() const;
  void set_folder_name(const std::string& value);
  void set_folder_name(std::string&& value);
  void set_folder_name(const char* value);
  void set_folder_name(const char* value, size_t size);
  std::string* mutable_folder_name();
  std::string* release_folder_name();
  void set_allocated_folder_name(std::string* folder_name);
  private:
  const std::string& _internal_folder_name() const;
  void _internal_set_folder_name(const std::string& value);
  std::string* _internal_mutable_folder_name();
  public:

  // string folder_path = 2;
  void clear_folder_path();
  const std::string& folder_path() const;
  void set_folder_path(const std::string& value);
  void set_folder_path(std::string&& value);
  void set_folder_path(const char* value);
  void set_folder_path(const char* value, size_t size);
  std::string* mutable_folder_path();
  std::string* release_folder_path();
  void set_allocated_folder_path(std::string* folder_path);
  private:
  const std::string& _internal_folder_path() const;
  void _internal_set_folder_path(const std::string& value);
  std::string* _internal_mutable_folder_path();
  public:

  // bytes sample_img = 9;
  void clear_sample_img();
  const std::string& sample_img() const;
  void set_sample_img(const std::string& value);
  void set_sample_img(std::string&& value);
  void set_sample_img(const char* value);
  void set_sample_img(const void* value, size_t size);
  std::string* mutable_sample_img();
  std::string* release_sample_img();
  void set_allocated_sample_img(std::string* sample_img);
  private:
  const std::string& _internal_sample_img() const;
  void _internal_set_sample_img(const std::string& value);
  std::string* _internal_mutable_sample_img();
  public:

  // .helmsley.scoreInfo scores = 10;
  bool has_scores() const;
  private:
  bool _internal_has_scores() const;
  public:
  void clear_scores();
  const ::helmsley::scoreInfo& scores() const;
  ::helmsley::scoreInfo* release_scores();
  ::helmsley::scoreInfo* mutable_scores();
  void set_allocated_scores(::helmsley::scoreInfo* scores);
  private:
  const ::helmsley::scoreInfo& _internal_scores() const;
  ::helmsley::scoreInfo* _internal_mutable_scores();
  public:
  void unsafe_arena_set_allocated_scores(
      ::helmsley::scoreInfo* scores);
  ::helmsley::scoreInfo* unsafe_arena_release_scores();

  // float volume_loc_range = 6;
  void clear_volume_loc_range();
  float volume_loc_range() const;
  void set_volume_loc_range(float value);
  private:
  float _internal_volume_loc_range() const;
  void _internal_set_volume_loc_range(float value);
  public:

  // bool with_mask = 7;
  void clear_with_mask();
  bool with_mask() const;
  void set_with_mask(bool value);
  private:
  bool _internal_with_mask() const;
  void _internal_set_with_mask(bool value);
  public:

  // .helmsley.volumeInfo.DataSource data_source = 8;
  void clear_data_source();
  ::helmsley::volumeInfo_DataSource data_source() const;
  void set_data_source(::helmsley::volumeInfo_DataSource value);
  private:
  ::helmsley::volumeInfo_DataSource _internal_data_source() const;
  void _internal_set_data_source(::helmsley::volumeInfo_DataSource value);
  public:

  // @@protoc_insertion_point(class_scope:helmsley.volumeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > dims_;
  mutable std::atomic<int> _dims_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > orientation_;
  mutable std::atomic<int> _orientation_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > resolution_;
  mutable std::atomic<int> _resolution_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr folder_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr folder_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sample_img_;
  ::helmsley::scoreInfo* scores_;
  float volume_loc_range_;
  bool with_mask_;
  int data_source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transManager_2eproto;
};
// -------------------------------------------------------------------

class datasetResponse_datasetInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:helmsley.datasetResponse.datasetInfo) */ {
 public:
  inline datasetResponse_datasetInfo() : datasetResponse_datasetInfo(nullptr) {}
  virtual ~datasetResponse_datasetInfo();

  datasetResponse_datasetInfo(const datasetResponse_datasetInfo& from);
  datasetResponse_datasetInfo(datasetResponse_datasetInfo&& from) noexcept
    : datasetResponse_datasetInfo() {
    *this = ::std::move(from);
  }

  inline datasetResponse_datasetInfo& operator=(const datasetResponse_datasetInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline datasetResponse_datasetInfo& operator=(datasetResponse_datasetInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const datasetResponse_datasetInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const datasetResponse_datasetInfo* internal_default_instance() {
    return reinterpret_cast<const datasetResponse_datasetInfo*>(
               &_datasetResponse_datasetInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(datasetResponse_datasetInfo& a, datasetResponse_datasetInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(datasetResponse_datasetInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(datasetResponse_datasetInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline datasetResponse_datasetInfo* New() const final {
    return CreateMaybeMessage<datasetResponse_datasetInfo>(nullptr);
  }

  datasetResponse_datasetInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<datasetResponse_datasetInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const datasetResponse_datasetInfo& from);
  void MergeFrom(const datasetResponse_datasetInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(datasetResponse_datasetInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "helmsley.datasetResponse.datasetInfo";
  }
  protected:
  explicit datasetResponse_datasetInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transManager_2eproto);
    return ::descriptor_table_transManager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaskFoldersFieldNumber = 5,
    kFolderNameFieldNumber = 1,
    kPatientNameFieldNumber = 2,
    kDateFieldNumber = 3,
    kPhysicanNameFieldNumber = 4,
  };
  // repeated string mask_folders = 5;
  int mask_folders_size() const;
  private:
  int _internal_mask_folders_size() const;
  public:
  void clear_mask_folders();
  const std::string& mask_folders(int index) const;
  std::string* mutable_mask_folders(int index);
  void set_mask_folders(int index, const std::string& value);
  void set_mask_folders(int index, std::string&& value);
  void set_mask_folders(int index, const char* value);
  void set_mask_folders(int index, const char* value, size_t size);
  std::string* add_mask_folders();
  void add_mask_folders(const std::string& value);
  void add_mask_folders(std::string&& value);
  void add_mask_folders(const char* value);
  void add_mask_folders(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& mask_folders() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_mask_folders();
  private:
  const std::string& _internal_mask_folders(int index) const;
  std::string* _internal_add_mask_folders();
  public:

  // string folder_name = 1;
  void clear_folder_name();
  const std::string& folder_name() const;
  void set_folder_name(const std::string& value);
  void set_folder_name(std::string&& value);
  void set_folder_name(const char* value);
  void set_folder_name(const char* value, size_t size);
  std::string* mutable_folder_name();
  std::string* release_folder_name();
  void set_allocated_folder_name(std::string* folder_name);
  private:
  const std::string& _internal_folder_name() const;
  void _internal_set_folder_name(const std::string& value);
  std::string* _internal_mutable_folder_name();
  public:

  // string patient_name = 2;
  void clear_patient_name();
  const std::string& patient_name() const;
  void set_patient_name(const std::string& value);
  void set_patient_name(std::string&& value);
  void set_patient_name(const char* value);
  void set_patient_name(const char* value, size_t size);
  std::string* mutable_patient_name();
  std::string* release_patient_name();
  void set_allocated_patient_name(std::string* patient_name);
  private:
  const std::string& _internal_patient_name() const;
  void _internal_set_patient_name(const std::string& value);
  std::string* _internal_mutable_patient_name();
  public:

  // string date = 3;
  void clear_date();
  const std::string& date() const;
  void set_date(const std::string& value);
  void set_date(std::string&& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  std::string* mutable_date();
  std::string* release_date();
  void set_allocated_date(std::string* date);
  private:
  const std::string& _internal_date() const;
  void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // string physican_name = 4;
  void clear_physican_name();
  const std::string& physican_name() const;
  void set_physican_name(const std::string& value);
  void set_physican_name(std::string&& value);
  void set_physican_name(const char* value);
  void set_physican_name(const char* value, size_t size);
  std::string* mutable_physican_name();
  std::string* release_physican_name();
  void set_allocated_physican_name(std::string* physican_name);
  private:
  const std::string& _internal_physican_name() const;
  void _internal_set_physican_name(const std::string& value);
  std::string* _internal_mutable_physican_name();
  public:

  // @@protoc_insertion_point(class_scope:helmsley.datasetResponse.datasetInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> mask_folders_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr folder_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patient_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr physican_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transManager_2eproto;
};
// -------------------------------------------------------------------

class datasetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:helmsley.datasetResponse) */ {
 public:
  inline datasetResponse() : datasetResponse(nullptr) {}
  virtual ~datasetResponse();

  datasetResponse(const datasetResponse& from);
  datasetResponse(datasetResponse&& from) noexcept
    : datasetResponse() {
    *this = ::std::move(from);
  }

  inline datasetResponse& operator=(const datasetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline datasetResponse& operator=(datasetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const datasetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const datasetResponse* internal_default_instance() {
    return reinterpret_cast<const datasetResponse*>(
               &_datasetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(datasetResponse& a, datasetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(datasetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(datasetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline datasetResponse* New() const final {
    return CreateMaybeMessage<datasetResponse>(nullptr);
  }

  datasetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<datasetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const datasetResponse& from);
  void MergeFrom(const datasetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(datasetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "helmsley.datasetResponse";
  }
  protected:
  explicit datasetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transManager_2eproto);
    return ::descriptor_table_transManager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef datasetResponse_datasetInfo datasetInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasetsFieldNumber = 1,
  };
  // repeated .helmsley.datasetResponse.datasetInfo datasets = 1;
  int datasets_size() const;
  private:
  int _internal_datasets_size() const;
  public:
  void clear_datasets();
  ::helmsley::datasetResponse_datasetInfo* mutable_datasets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::helmsley::datasetResponse_datasetInfo >*
      mutable_datasets();
  private:
  const ::helmsley::datasetResponse_datasetInfo& _internal_datasets(int index) const;
  ::helmsley::datasetResponse_datasetInfo* _internal_add_datasets();
  public:
  const ::helmsley::datasetResponse_datasetInfo& datasets(int index) const;
  ::helmsley::datasetResponse_datasetInfo* add_datasets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::helmsley::datasetResponse_datasetInfo >&
      datasets() const;

  // @@protoc_insertion_point(class_scope:helmsley.datasetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::helmsley::datasetResponse_datasetInfo > datasets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transManager_2eproto;
};
// -------------------------------------------------------------------

class volumeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:helmsley.volumeResponse) */ {
 public:
  inline volumeResponse() : volumeResponse(nullptr) {}
  virtual ~volumeResponse();

  volumeResponse(const volumeResponse& from);
  volumeResponse(volumeResponse&& from) noexcept
    : volumeResponse() {
    *this = ::std::move(from);
  }

  inline volumeResponse& operator=(const volumeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline volumeResponse& operator=(volumeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const volumeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const volumeResponse* internal_default_instance() {
    return reinterpret_cast<const volumeResponse*>(
               &_volumeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(volumeResponse& a, volumeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(volumeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(volumeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline volumeResponse* New() const final {
    return CreateMaybeMessage<volumeResponse>(nullptr);
  }

  volumeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<volumeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const volumeResponse& from);
  void MergeFrom(const volumeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(volumeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "helmsley.volumeResponse";
  }
  protected:
  explicit volumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transManager_2eproto);
    return ::descriptor_table_transManager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVolumesFieldNumber = 1,
  };
  // repeated .helmsley.volumeInfo volumes = 1;
  int volumes_size() const;
  private:
  int _internal_volumes_size() const;
  public:
  void clear_volumes();
  ::helmsley::volumeInfo* mutable_volumes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::helmsley::volumeInfo >*
      mutable_volumes();
  private:
  const ::helmsley::volumeInfo& _internal_volumes(int index) const;
  ::helmsley::volumeInfo* _internal_add_volumes();
  public:
  const ::helmsley::volumeInfo& volumes(int index) const;
  ::helmsley::volumeInfo* add_volumes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::helmsley::volumeInfo >&
      volumes() const;

  // @@protoc_insertion_point(class_scope:helmsley.volumeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::helmsley::volumeInfo > volumes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transManager_2eproto;
};
// -------------------------------------------------------------------

class volumeWholeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:helmsley.volumeWholeResponse) */ {
 public:
  inline volumeWholeResponse() : volumeWholeResponse(nullptr) {}
  virtual ~volumeWholeResponse();

  volumeWholeResponse(const volumeWholeResponse& from);
  volumeWholeResponse(volumeWholeResponse&& from) noexcept
    : volumeWholeResponse() {
    *this = ::std::move(from);
  }

  inline volumeWholeResponse& operator=(const volumeWholeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline volumeWholeResponse& operator=(volumeWholeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const volumeWholeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const volumeWholeResponse* internal_default_instance() {
    return reinterpret_cast<const volumeWholeResponse*>(
               &_volumeWholeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(volumeWholeResponse& a, volumeWholeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(volumeWholeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(volumeWholeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline volumeWholeResponse* New() const final {
    return CreateMaybeMessage<volumeWholeResponse>(nullptr);
  }

  volumeWholeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<volumeWholeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const volumeWholeResponse& from);
  void MergeFrom(const volumeWholeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(volumeWholeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "helmsley.volumeWholeResponse";
  }
  protected:
  explicit volumeWholeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transManager_2eproto);
    return ::descriptor_table_transManager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:helmsley.volumeWholeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transManager_2eproto;
};
// -------------------------------------------------------------------

class centerlineData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:helmsley.centerlineData) */ {
 public:
  inline centerlineData() : centerlineData(nullptr) {}
  virtual ~centerlineData();

  centerlineData(const centerlineData& from);
  centerlineData(centerlineData&& from) noexcept
    : centerlineData() {
    *this = ::std::move(from);
  }

  inline centerlineData& operator=(const centerlineData& from) {
    CopyFrom(from);
    return *this;
  }
  inline centerlineData& operator=(centerlineData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const centerlineData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const centerlineData* internal_default_instance() {
    return reinterpret_cast<const centerlineData*>(
               &_centerlineData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(centerlineData& a, centerlineData& b) {
    a.Swap(&b);
  }
  inline void Swap(centerlineData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(centerlineData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline centerlineData* New() const final {
    return CreateMaybeMessage<centerlineData>(nullptr);
  }

  centerlineData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<centerlineData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const centerlineData& from);
  void MergeFrom(const centerlineData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(centerlineData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "helmsley.centerlineData";
  }
  protected:
  explicit centerlineData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transManager_2eproto);
    return ::descriptor_table_transManager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated float data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  float _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_data() const;
  void _internal_add_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_data();
  public:
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:helmsley.centerlineData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transManager_2eproto;
};
// -------------------------------------------------------------------

class dcmImage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:helmsley.dcmImage) */ {
 public:
  inline dcmImage() : dcmImage(nullptr) {}
  virtual ~dcmImage();

  dcmImage(const dcmImage& from);
  dcmImage(dcmImage&& from) noexcept
    : dcmImage() {
    *this = ::std::move(from);
  }

  inline dcmImage& operator=(const dcmImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline dcmImage& operator=(dcmImage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const dcmImage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const dcmImage* internal_default_instance() {
    return reinterpret_cast<const dcmImage*>(
               &_dcmImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(dcmImage& a, dcmImage& b) {
    a.Swap(&b);
  }
  inline void Swap(dcmImage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(dcmImage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline dcmImage* New() const final {
    return CreateMaybeMessage<dcmImage>(nullptr);
  }

  dcmImage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<dcmImage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const dcmImage& from);
  void MergeFrom(const dcmImage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(dcmImage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "helmsley.dcmImage";
  }
  protected:
  explicit dcmImage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transManager_2eproto);
    return ::descriptor_table_transManager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kDcmIDFieldNumber = 1,
    kPositionFieldNumber = 2,
  };
  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 dcmID = 1;
  void clear_dcmid();
  ::PROTOBUF_NAMESPACE_ID::int32 dcmid() const;
  void set_dcmid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dcmid() const;
  void _internal_set_dcmid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float position = 2;
  void clear_position();
  float position() const;
  void set_position(float value);
  private:
  float _internal_position() const;
  void _internal_set_position(float value);
  public:

  // @@protoc_insertion_point(class_scope:helmsley.dcmImage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 dcmid_;
  float position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transManager_2eproto;
};
// -------------------------------------------------------------------

class RequestWholeVolume PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:helmsley.RequestWholeVolume) */ {
 public:
  inline RequestWholeVolume() : RequestWholeVolume(nullptr) {}
  virtual ~RequestWholeVolume();

  RequestWholeVolume(const RequestWholeVolume& from);
  RequestWholeVolume(RequestWholeVolume&& from) noexcept
    : RequestWholeVolume() {
    *this = ::std::move(from);
  }

  inline RequestWholeVolume& operator=(const RequestWholeVolume& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestWholeVolume& operator=(RequestWholeVolume&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestWholeVolume& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestWholeVolume* internal_default_instance() {
    return reinterpret_cast<const RequestWholeVolume*>(
               &_RequestWholeVolume_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RequestWholeVolume& a, RequestWholeVolume& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestWholeVolume* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestWholeVolume* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestWholeVolume* New() const final {
    return CreateMaybeMessage<RequestWholeVolume>(nullptr);
  }

  RequestWholeVolume* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestWholeVolume>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestWholeVolume& from);
  void MergeFrom(const RequestWholeVolume& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestWholeVolume* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "helmsley.RequestWholeVolume";
  }
  protected:
  explicit RequestWholeVolume(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transManager_2eproto);
    return ::descriptor_table_transManager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReqMsgFieldNumber = 2,
    kClientIdFieldNumber = 1,
    kUnitSizeFieldNumber = 3,
  };
  // string req_msg = 2;
  void clear_req_msg();
  const std::string& req_msg() const;
  void set_req_msg(const std::string& value);
  void set_req_msg(std::string&& value);
  void set_req_msg(const char* value);
  void set_req_msg(const char* value, size_t size);
  std::string* mutable_req_msg();
  std::string* release_req_msg();
  void set_allocated_req_msg(std::string* req_msg);
  private:
  const std::string& _internal_req_msg() const;
  void _internal_set_req_msg(const std::string& value);
  std::string* _internal_mutable_req_msg();
  public:

  // int32 client_id = 1;
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::int32 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 unit_size = 3;
  void clear_unit_size();
  ::PROTOBUF_NAMESPACE_ID::int32 unit_size() const;
  void set_unit_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_unit_size() const;
  void _internal_set_unit_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:helmsley.RequestWholeVolume)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr req_msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 unit_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transManager_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// configResponse_configInfo

// string file_name = 1;
inline void configResponse_configInfo::clear_file_name() {
  file_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& configResponse_configInfo::file_name() const {
  // @@protoc_insertion_point(field_get:helmsley.configResponse.configInfo.file_name)
  return _internal_file_name();
}
inline void configResponse_configInfo::set_file_name(const std::string& value) {
  _internal_set_file_name(value);
  // @@protoc_insertion_point(field_set:helmsley.configResponse.configInfo.file_name)
}
inline std::string* configResponse_configInfo::mutable_file_name() {
  // @@protoc_insertion_point(field_mutable:helmsley.configResponse.configInfo.file_name)
  return _internal_mutable_file_name();
}
inline const std::string& configResponse_configInfo::_internal_file_name() const {
  return file_name_.Get();
}
inline void configResponse_configInfo::_internal_set_file_name(const std::string& value) {
  
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void configResponse_configInfo::set_file_name(std::string&& value) {
  
  file_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:helmsley.configResponse.configInfo.file_name)
}
inline void configResponse_configInfo::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:helmsley.configResponse.configInfo.file_name)
}
inline void configResponse_configInfo::set_file_name(const char* value,
    size_t size) {
  
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:helmsley.configResponse.configInfo.file_name)
}
inline std::string* configResponse_configInfo::_internal_mutable_file_name() {
  
  return file_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* configResponse_configInfo::release_file_name() {
  // @@protoc_insertion_point(field_release:helmsley.configResponse.configInfo.file_name)
  return file_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void configResponse_configInfo::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:helmsley.configResponse.configInfo.file_name)
}

// string content = 2;
inline void configResponse_configInfo::clear_content() {
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& configResponse_configInfo::content() const {
  // @@protoc_insertion_point(field_get:helmsley.configResponse.configInfo.content)
  return _internal_content();
}
inline void configResponse_configInfo::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:helmsley.configResponse.configInfo.content)
}
inline std::string* configResponse_configInfo::mutable_content() {
  // @@protoc_insertion_point(field_mutable:helmsley.configResponse.configInfo.content)
  return _internal_mutable_content();
}
inline const std::string& configResponse_configInfo::_internal_content() const {
  return content_.Get();
}
inline void configResponse_configInfo::_internal_set_content(const std::string& value) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void configResponse_configInfo::set_content(std::string&& value) {
  
  content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:helmsley.configResponse.configInfo.content)
}
inline void configResponse_configInfo::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:helmsley.configResponse.configInfo.content)
}
inline void configResponse_configInfo::set_content(const char* value,
    size_t size) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:helmsley.configResponse.configInfo.content)
}
inline std::string* configResponse_configInfo::_internal_mutable_content() {
  
  return content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* configResponse_configInfo::release_content() {
  // @@protoc_insertion_point(field_release:helmsley.configResponse.configInfo.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void configResponse_configInfo::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:helmsley.configResponse.configInfo.content)
}

// -------------------------------------------------------------------

// configResponse

// repeated .helmsley.configResponse.configInfo configs = 1;
inline int configResponse::_internal_configs_size() const {
  return configs_.size();
}
inline int configResponse::configs_size() const {
  return _internal_configs_size();
}
inline void configResponse::clear_configs() {
  configs_.Clear();
}
inline ::helmsley::configResponse_configInfo* configResponse::mutable_configs(int index) {
  // @@protoc_insertion_point(field_mutable:helmsley.configResponse.configs)
  return configs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::helmsley::configResponse_configInfo >*
configResponse::mutable_configs() {
  // @@protoc_insertion_point(field_mutable_list:helmsley.configResponse.configs)
  return &configs_;
}
inline const ::helmsley::configResponse_configInfo& configResponse::_internal_configs(int index) const {
  return configs_.Get(index);
}
inline const ::helmsley::configResponse_configInfo& configResponse::configs(int index) const {
  // @@protoc_insertion_point(field_get:helmsley.configResponse.configs)
  return _internal_configs(index);
}
inline ::helmsley::configResponse_configInfo* configResponse::_internal_add_configs() {
  return configs_.Add();
}
inline ::helmsley::configResponse_configInfo* configResponse::add_configs() {
  // @@protoc_insertion_point(field_add:helmsley.configResponse.configs)
  return _internal_add_configs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::helmsley::configResponse_configInfo >&
configResponse::configs() const {
  // @@protoc_insertion_point(field_list:helmsley.configResponse.configs)
  return configs_;
}

// -------------------------------------------------------------------

// scoreInfo

// int32 rgroup_id = 1;
inline void scoreInfo::clear_rgroup_id() {
  rgroup_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 scoreInfo::_internal_rgroup_id() const {
  return rgroup_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 scoreInfo::rgroup_id() const {
  // @@protoc_insertion_point(field_get:helmsley.scoreInfo.rgroup_id)
  return _internal_rgroup_id();
}
inline void scoreInfo::_internal_set_rgroup_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rgroup_id_ = value;
}
inline void scoreInfo::set_rgroup_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rgroup_id(value);
  // @@protoc_insertion_point(field_set:helmsley.scoreInfo.rgroup_id)
}

// int32 rank_id = 2;
inline void scoreInfo::clear_rank_id() {
  rank_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 scoreInfo::_internal_rank_id() const {
  return rank_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 scoreInfo::rank_id() const {
  // @@protoc_insertion_point(field_get:helmsley.scoreInfo.rank_id)
  return _internal_rank_id();
}
inline void scoreInfo::_internal_set_rank_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rank_id_ = value;
}
inline void scoreInfo::set_rank_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rank_id(value);
  // @@protoc_insertion_point(field_set:helmsley.scoreInfo.rank_id)
}

// float rank_score = 3;
inline void scoreInfo::clear_rank_score() {
  rank_score_ = 0;
}
inline float scoreInfo::_internal_rank_score() const {
  return rank_score_;
}
inline float scoreInfo::rank_score() const {
  // @@protoc_insertion_point(field_get:helmsley.scoreInfo.rank_score)
  return _internal_rank_score();
}
inline void scoreInfo::_internal_set_rank_score(float value) {
  
  rank_score_ = value;
}
inline void scoreInfo::set_rank_score(float value) {
  _internal_set_rank_score(value);
  // @@protoc_insertion_point(field_set:helmsley.scoreInfo.rank_score)
}

// repeated float raw_score = 4;
inline int scoreInfo::_internal_raw_score_size() const {
  return raw_score_.size();
}
inline int scoreInfo::raw_score_size() const {
  return _internal_raw_score_size();
}
inline void scoreInfo::clear_raw_score() {
  raw_score_.Clear();
}
inline float scoreInfo::_internal_raw_score(int index) const {
  return raw_score_.Get(index);
}
inline float scoreInfo::raw_score(int index) const {
  // @@protoc_insertion_point(field_get:helmsley.scoreInfo.raw_score)
  return _internal_raw_score(index);
}
inline void scoreInfo::set_raw_score(int index, float value) {
  raw_score_.Set(index, value);
  // @@protoc_insertion_point(field_set:helmsley.scoreInfo.raw_score)
}
inline void scoreInfo::_internal_add_raw_score(float value) {
  raw_score_.Add(value);
}
inline void scoreInfo::add_raw_score(float value) {
  _internal_add_raw_score(value);
  // @@protoc_insertion_point(field_add:helmsley.scoreInfo.raw_score)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
scoreInfo::_internal_raw_score() const {
  return raw_score_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
scoreInfo::raw_score() const {
  // @@protoc_insertion_point(field_list:helmsley.scoreInfo.raw_score)
  return _internal_raw_score();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
scoreInfo::_internal_mutable_raw_score() {
  return &raw_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
scoreInfo::mutable_raw_score() {
  // @@protoc_insertion_point(field_mutable_list:helmsley.scoreInfo.raw_score)
  return _internal_mutable_raw_score();
}

// repeated float vol_score = 5;
inline int scoreInfo::_internal_vol_score_size() const {
  return vol_score_.size();
}
inline int scoreInfo::vol_score_size() const {
  return _internal_vol_score_size();
}
inline void scoreInfo::clear_vol_score() {
  vol_score_.Clear();
}
inline float scoreInfo::_internal_vol_score(int index) const {
  return vol_score_.Get(index);
}
inline float scoreInfo::vol_score(int index) const {
  // @@protoc_insertion_point(field_get:helmsley.scoreInfo.vol_score)
  return _internal_vol_score(index);
}
inline void scoreInfo::set_vol_score(int index, float value) {
  vol_score_.Set(index, value);
  // @@protoc_insertion_point(field_set:helmsley.scoreInfo.vol_score)
}
inline void scoreInfo::_internal_add_vol_score(float value) {
  vol_score_.Add(value);
}
inline void scoreInfo::add_vol_score(float value) {
  _internal_add_vol_score(value);
  // @@protoc_insertion_point(field_add:helmsley.scoreInfo.vol_score)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
scoreInfo::_internal_vol_score() const {
  return vol_score_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
scoreInfo::vol_score() const {
  // @@protoc_insertion_point(field_list:helmsley.scoreInfo.vol_score)
  return _internal_vol_score();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
scoreInfo::_internal_mutable_vol_score() {
  return &vol_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
scoreInfo::mutable_vol_score() {
  // @@protoc_insertion_point(field_mutable_list:helmsley.scoreInfo.vol_score)
  return _internal_mutable_vol_score();
}

// -------------------------------------------------------------------

// volumeInfo

// string folder_name = 1;
inline void volumeInfo::clear_folder_name() {
  folder_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& volumeInfo::folder_name() const {
  // @@protoc_insertion_point(field_get:helmsley.volumeInfo.folder_name)
  return _internal_folder_name();
}
inline void volumeInfo::set_folder_name(const std::string& value) {
  _internal_set_folder_name(value);
  // @@protoc_insertion_point(field_set:helmsley.volumeInfo.folder_name)
}
inline std::string* volumeInfo::mutable_folder_name() {
  // @@protoc_insertion_point(field_mutable:helmsley.volumeInfo.folder_name)
  return _internal_mutable_folder_name();
}
inline const std::string& volumeInfo::_internal_folder_name() const {
  return folder_name_.Get();
}
inline void volumeInfo::_internal_set_folder_name(const std::string& value) {
  
  folder_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void volumeInfo::set_folder_name(std::string&& value) {
  
  folder_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:helmsley.volumeInfo.folder_name)
}
inline void volumeInfo::set_folder_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  folder_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:helmsley.volumeInfo.folder_name)
}
inline void volumeInfo::set_folder_name(const char* value,
    size_t size) {
  
  folder_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:helmsley.volumeInfo.folder_name)
}
inline std::string* volumeInfo::_internal_mutable_folder_name() {
  
  return folder_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* volumeInfo::release_folder_name() {
  // @@protoc_insertion_point(field_release:helmsley.volumeInfo.folder_name)
  return folder_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void volumeInfo::set_allocated_folder_name(std::string* folder_name) {
  if (folder_name != nullptr) {
    
  } else {
    
  }
  folder_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), folder_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:helmsley.volumeInfo.folder_name)
}

// string folder_path = 2;
inline void volumeInfo::clear_folder_path() {
  folder_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& volumeInfo::folder_path() const {
  // @@protoc_insertion_point(field_get:helmsley.volumeInfo.folder_path)
  return _internal_folder_path();
}
inline void volumeInfo::set_folder_path(const std::string& value) {
  _internal_set_folder_path(value);
  // @@protoc_insertion_point(field_set:helmsley.volumeInfo.folder_path)
}
inline std::string* volumeInfo::mutable_folder_path() {
  // @@protoc_insertion_point(field_mutable:helmsley.volumeInfo.folder_path)
  return _internal_mutable_folder_path();
}
inline const std::string& volumeInfo::_internal_folder_path() const {
  return folder_path_.Get();
}
inline void volumeInfo::_internal_set_folder_path(const std::string& value) {
  
  folder_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void volumeInfo::set_folder_path(std::string&& value) {
  
  folder_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:helmsley.volumeInfo.folder_path)
}
inline void volumeInfo::set_folder_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  folder_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:helmsley.volumeInfo.folder_path)
}
inline void volumeInfo::set_folder_path(const char* value,
    size_t size) {
  
  folder_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:helmsley.volumeInfo.folder_path)
}
inline std::string* volumeInfo::_internal_mutable_folder_path() {
  
  return folder_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* volumeInfo::release_folder_path() {
  // @@protoc_insertion_point(field_release:helmsley.volumeInfo.folder_path)
  return folder_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void volumeInfo::set_allocated_folder_path(std::string* folder_path) {
  if (folder_path != nullptr) {
    
  } else {
    
  }
  folder_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), folder_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:helmsley.volumeInfo.folder_path)
}

// repeated int32 dims = 3;
inline int volumeInfo::_internal_dims_size() const {
  return dims_.size();
}
inline int volumeInfo::dims_size() const {
  return _internal_dims_size();
}
inline void volumeInfo::clear_dims() {
  dims_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 volumeInfo::_internal_dims(int index) const {
  return dims_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 volumeInfo::dims(int index) const {
  // @@protoc_insertion_point(field_get:helmsley.volumeInfo.dims)
  return _internal_dims(index);
}
inline void volumeInfo::set_dims(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:helmsley.volumeInfo.dims)
}
inline void volumeInfo::_internal_add_dims(::PROTOBUF_NAMESPACE_ID::int32 value) {
  dims_.Add(value);
}
inline void volumeInfo::add_dims(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_dims(value);
  // @@protoc_insertion_point(field_add:helmsley.volumeInfo.dims)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
volumeInfo::_internal_dims() const {
  return dims_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
volumeInfo::dims() const {
  // @@protoc_insertion_point(field_list:helmsley.volumeInfo.dims)
  return _internal_dims();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
volumeInfo::_internal_mutable_dims() {
  return &dims_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
volumeInfo::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:helmsley.volumeInfo.dims)
  return _internal_mutable_dims();
}

// repeated float orientation = 4;
inline int volumeInfo::_internal_orientation_size() const {
  return orientation_.size();
}
inline int volumeInfo::orientation_size() const {
  return _internal_orientation_size();
}
inline void volumeInfo::clear_orientation() {
  orientation_.Clear();
}
inline float volumeInfo::_internal_orientation(int index) const {
  return orientation_.Get(index);
}
inline float volumeInfo::orientation(int index) const {
  // @@protoc_insertion_point(field_get:helmsley.volumeInfo.orientation)
  return _internal_orientation(index);
}
inline void volumeInfo::set_orientation(int index, float value) {
  orientation_.Set(index, value);
  // @@protoc_insertion_point(field_set:helmsley.volumeInfo.orientation)
}
inline void volumeInfo::_internal_add_orientation(float value) {
  orientation_.Add(value);
}
inline void volumeInfo::add_orientation(float value) {
  _internal_add_orientation(value);
  // @@protoc_insertion_point(field_add:helmsley.volumeInfo.orientation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
volumeInfo::_internal_orientation() const {
  return orientation_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
volumeInfo::orientation() const {
  // @@protoc_insertion_point(field_list:helmsley.volumeInfo.orientation)
  return _internal_orientation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
volumeInfo::_internal_mutable_orientation() {
  return &orientation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
volumeInfo::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable_list:helmsley.volumeInfo.orientation)
  return _internal_mutable_orientation();
}

// repeated float resolution = 5;
inline int volumeInfo::_internal_resolution_size() const {
  return resolution_.size();
}
inline int volumeInfo::resolution_size() const {
  return _internal_resolution_size();
}
inline void volumeInfo::clear_resolution() {
  resolution_.Clear();
}
inline float volumeInfo::_internal_resolution(int index) const {
  return resolution_.Get(index);
}
inline float volumeInfo::resolution(int index) const {
  // @@protoc_insertion_point(field_get:helmsley.volumeInfo.resolution)
  return _internal_resolution(index);
}
inline void volumeInfo::set_resolution(int index, float value) {
  resolution_.Set(index, value);
  // @@protoc_insertion_point(field_set:helmsley.volumeInfo.resolution)
}
inline void volumeInfo::_internal_add_resolution(float value) {
  resolution_.Add(value);
}
inline void volumeInfo::add_resolution(float value) {
  _internal_add_resolution(value);
  // @@protoc_insertion_point(field_add:helmsley.volumeInfo.resolution)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
volumeInfo::_internal_resolution() const {
  return resolution_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
volumeInfo::resolution() const {
  // @@protoc_insertion_point(field_list:helmsley.volumeInfo.resolution)
  return _internal_resolution();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
volumeInfo::_internal_mutable_resolution() {
  return &resolution_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
volumeInfo::mutable_resolution() {
  // @@protoc_insertion_point(field_mutable_list:helmsley.volumeInfo.resolution)
  return _internal_mutable_resolution();
}

// float volume_loc_range = 6;
inline void volumeInfo::clear_volume_loc_range() {
  volume_loc_range_ = 0;
}
inline float volumeInfo::_internal_volume_loc_range() const {
  return volume_loc_range_;
}
inline float volumeInfo::volume_loc_range() const {
  // @@protoc_insertion_point(field_get:helmsley.volumeInfo.volume_loc_range)
  return _internal_volume_loc_range();
}
inline void volumeInfo::_internal_set_volume_loc_range(float value) {
  
  volume_loc_range_ = value;
}
inline void volumeInfo::set_volume_loc_range(float value) {
  _internal_set_volume_loc_range(value);
  // @@protoc_insertion_point(field_set:helmsley.volumeInfo.volume_loc_range)
}

// bool with_mask = 7;
inline void volumeInfo::clear_with_mask() {
  with_mask_ = false;
}
inline bool volumeInfo::_internal_with_mask() const {
  return with_mask_;
}
inline bool volumeInfo::with_mask() const {
  // @@protoc_insertion_point(field_get:helmsley.volumeInfo.with_mask)
  return _internal_with_mask();
}
inline void volumeInfo::_internal_set_with_mask(bool value) {
  
  with_mask_ = value;
}
inline void volumeInfo::set_with_mask(bool value) {
  _internal_set_with_mask(value);
  // @@protoc_insertion_point(field_set:helmsley.volumeInfo.with_mask)
}

// .helmsley.volumeInfo.DataSource data_source = 8;
inline void volumeInfo::clear_data_source() {
  data_source_ = 0;
}
inline ::helmsley::volumeInfo_DataSource volumeInfo::_internal_data_source() const {
  return static_cast< ::helmsley::volumeInfo_DataSource >(data_source_);
}
inline ::helmsley::volumeInfo_DataSource volumeInfo::data_source() const {
  // @@protoc_insertion_point(field_get:helmsley.volumeInfo.data_source)
  return _internal_data_source();
}
inline void volumeInfo::_internal_set_data_source(::helmsley::volumeInfo_DataSource value) {
  
  data_source_ = value;
}
inline void volumeInfo::set_data_source(::helmsley::volumeInfo_DataSource value) {
  _internal_set_data_source(value);
  // @@protoc_insertion_point(field_set:helmsley.volumeInfo.data_source)
}

// bytes sample_img = 9;
inline void volumeInfo::clear_sample_img() {
  sample_img_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& volumeInfo::sample_img() const {
  // @@protoc_insertion_point(field_get:helmsley.volumeInfo.sample_img)
  return _internal_sample_img();
}
inline void volumeInfo::set_sample_img(const std::string& value) {
  _internal_set_sample_img(value);
  // @@protoc_insertion_point(field_set:helmsley.volumeInfo.sample_img)
}
inline std::string* volumeInfo::mutable_sample_img() {
  // @@protoc_insertion_point(field_mutable:helmsley.volumeInfo.sample_img)
  return _internal_mutable_sample_img();
}
inline const std::string& volumeInfo::_internal_sample_img() const {
  return sample_img_.Get();
}
inline void volumeInfo::_internal_set_sample_img(const std::string& value) {
  
  sample_img_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void volumeInfo::set_sample_img(std::string&& value) {
  
  sample_img_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:helmsley.volumeInfo.sample_img)
}
inline void volumeInfo::set_sample_img(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sample_img_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:helmsley.volumeInfo.sample_img)
}
inline void volumeInfo::set_sample_img(const void* value,
    size_t size) {
  
  sample_img_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:helmsley.volumeInfo.sample_img)
}
inline std::string* volumeInfo::_internal_mutable_sample_img() {
  
  return sample_img_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* volumeInfo::release_sample_img() {
  // @@protoc_insertion_point(field_release:helmsley.volumeInfo.sample_img)
  return sample_img_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void volumeInfo::set_allocated_sample_img(std::string* sample_img) {
  if (sample_img != nullptr) {
    
  } else {
    
  }
  sample_img_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sample_img,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:helmsley.volumeInfo.sample_img)
}

// .helmsley.scoreInfo scores = 10;
inline bool volumeInfo::_internal_has_scores() const {
  return this != internal_default_instance() && scores_ != nullptr;
}
inline bool volumeInfo::has_scores() const {
  return _internal_has_scores();
}
inline void volumeInfo::clear_scores() {
  if (GetArena() == nullptr && scores_ != nullptr) {
    delete scores_;
  }
  scores_ = nullptr;
}
inline const ::helmsley::scoreInfo& volumeInfo::_internal_scores() const {
  const ::helmsley::scoreInfo* p = scores_;
  return p != nullptr ? *p : *reinterpret_cast<const ::helmsley::scoreInfo*>(
      &::helmsley::_scoreInfo_default_instance_);
}
inline const ::helmsley::scoreInfo& volumeInfo::scores() const {
  // @@protoc_insertion_point(field_get:helmsley.volumeInfo.scores)
  return _internal_scores();
}
inline void volumeInfo::unsafe_arena_set_allocated_scores(
    ::helmsley::scoreInfo* scores) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scores_);
  }
  scores_ = scores;
  if (scores) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:helmsley.volumeInfo.scores)
}
inline ::helmsley::scoreInfo* volumeInfo::release_scores() {
  
  ::helmsley::scoreInfo* temp = scores_;
  scores_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::helmsley::scoreInfo* volumeInfo::unsafe_arena_release_scores() {
  // @@protoc_insertion_point(field_release:helmsley.volumeInfo.scores)
  
  ::helmsley::scoreInfo* temp = scores_;
  scores_ = nullptr;
  return temp;
}
inline ::helmsley::scoreInfo* volumeInfo::_internal_mutable_scores() {
  
  if (scores_ == nullptr) {
    auto* p = CreateMaybeMessage<::helmsley::scoreInfo>(GetArena());
    scores_ = p;
  }
  return scores_;
}
inline ::helmsley::scoreInfo* volumeInfo::mutable_scores() {
  // @@protoc_insertion_point(field_mutable:helmsley.volumeInfo.scores)
  return _internal_mutable_scores();
}
inline void volumeInfo::set_allocated_scores(::helmsley::scoreInfo* scores) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete scores_;
  }
  if (scores) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scores);
    if (message_arena != submessage_arena) {
      scores = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scores, submessage_arena);
    }
    
  } else {
    
  }
  scores_ = scores;
  // @@protoc_insertion_point(field_set_allocated:helmsley.volumeInfo.scores)
}

// -------------------------------------------------------------------

// datasetResponse_datasetInfo

// string folder_name = 1;
inline void datasetResponse_datasetInfo::clear_folder_name() {
  folder_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& datasetResponse_datasetInfo::folder_name() const {
  // @@protoc_insertion_point(field_get:helmsley.datasetResponse.datasetInfo.folder_name)
  return _internal_folder_name();
}
inline void datasetResponse_datasetInfo::set_folder_name(const std::string& value) {
  _internal_set_folder_name(value);
  // @@protoc_insertion_point(field_set:helmsley.datasetResponse.datasetInfo.folder_name)
}
inline std::string* datasetResponse_datasetInfo::mutable_folder_name() {
  // @@protoc_insertion_point(field_mutable:helmsley.datasetResponse.datasetInfo.folder_name)
  return _internal_mutable_folder_name();
}
inline const std::string& datasetResponse_datasetInfo::_internal_folder_name() const {
  return folder_name_.Get();
}
inline void datasetResponse_datasetInfo::_internal_set_folder_name(const std::string& value) {
  
  folder_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void datasetResponse_datasetInfo::set_folder_name(std::string&& value) {
  
  folder_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:helmsley.datasetResponse.datasetInfo.folder_name)
}
inline void datasetResponse_datasetInfo::set_folder_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  folder_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:helmsley.datasetResponse.datasetInfo.folder_name)
}
inline void datasetResponse_datasetInfo::set_folder_name(const char* value,
    size_t size) {
  
  folder_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:helmsley.datasetResponse.datasetInfo.folder_name)
}
inline std::string* datasetResponse_datasetInfo::_internal_mutable_folder_name() {
  
  return folder_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* datasetResponse_datasetInfo::release_folder_name() {
  // @@protoc_insertion_point(field_release:helmsley.datasetResponse.datasetInfo.folder_name)
  return folder_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void datasetResponse_datasetInfo::set_allocated_folder_name(std::string* folder_name) {
  if (folder_name != nullptr) {
    
  } else {
    
  }
  folder_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), folder_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:helmsley.datasetResponse.datasetInfo.folder_name)
}

// string patient_name = 2;
inline void datasetResponse_datasetInfo::clear_patient_name() {
  patient_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& datasetResponse_datasetInfo::patient_name() const {
  // @@protoc_insertion_point(field_get:helmsley.datasetResponse.datasetInfo.patient_name)
  return _internal_patient_name();
}
inline void datasetResponse_datasetInfo::set_patient_name(const std::string& value) {
  _internal_set_patient_name(value);
  // @@protoc_insertion_point(field_set:helmsley.datasetResponse.datasetInfo.patient_name)
}
inline std::string* datasetResponse_datasetInfo::mutable_patient_name() {
  // @@protoc_insertion_point(field_mutable:helmsley.datasetResponse.datasetInfo.patient_name)
  return _internal_mutable_patient_name();
}
inline const std::string& datasetResponse_datasetInfo::_internal_patient_name() const {
  return patient_name_.Get();
}
inline void datasetResponse_datasetInfo::_internal_set_patient_name(const std::string& value) {
  
  patient_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void datasetResponse_datasetInfo::set_patient_name(std::string&& value) {
  
  patient_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:helmsley.datasetResponse.datasetInfo.patient_name)
}
inline void datasetResponse_datasetInfo::set_patient_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  patient_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:helmsley.datasetResponse.datasetInfo.patient_name)
}
inline void datasetResponse_datasetInfo::set_patient_name(const char* value,
    size_t size) {
  
  patient_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:helmsley.datasetResponse.datasetInfo.patient_name)
}
inline std::string* datasetResponse_datasetInfo::_internal_mutable_patient_name() {
  
  return patient_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* datasetResponse_datasetInfo::release_patient_name() {
  // @@protoc_insertion_point(field_release:helmsley.datasetResponse.datasetInfo.patient_name)
  return patient_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void datasetResponse_datasetInfo::set_allocated_patient_name(std::string* patient_name) {
  if (patient_name != nullptr) {
    
  } else {
    
  }
  patient_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), patient_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:helmsley.datasetResponse.datasetInfo.patient_name)
}

// string date = 3;
inline void datasetResponse_datasetInfo::clear_date() {
  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& datasetResponse_datasetInfo::date() const {
  // @@protoc_insertion_point(field_get:helmsley.datasetResponse.datasetInfo.date)
  return _internal_date();
}
inline void datasetResponse_datasetInfo::set_date(const std::string& value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:helmsley.datasetResponse.datasetInfo.date)
}
inline std::string* datasetResponse_datasetInfo::mutable_date() {
  // @@protoc_insertion_point(field_mutable:helmsley.datasetResponse.datasetInfo.date)
  return _internal_mutable_date();
}
inline const std::string& datasetResponse_datasetInfo::_internal_date() const {
  return date_.Get();
}
inline void datasetResponse_datasetInfo::_internal_set_date(const std::string& value) {
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void datasetResponse_datasetInfo::set_date(std::string&& value) {
  
  date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:helmsley.datasetResponse.datasetInfo.date)
}
inline void datasetResponse_datasetInfo::set_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:helmsley.datasetResponse.datasetInfo.date)
}
inline void datasetResponse_datasetInfo::set_date(const char* value,
    size_t size) {
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:helmsley.datasetResponse.datasetInfo.date)
}
inline std::string* datasetResponse_datasetInfo::_internal_mutable_date() {
  
  return date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* datasetResponse_datasetInfo::release_date() {
  // @@protoc_insertion_point(field_release:helmsley.datasetResponse.datasetInfo.date)
  return date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void datasetResponse_datasetInfo::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    
  } else {
    
  }
  date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:helmsley.datasetResponse.datasetInfo.date)
}

// string physican_name = 4;
inline void datasetResponse_datasetInfo::clear_physican_name() {
  physican_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& datasetResponse_datasetInfo::physican_name() const {
  // @@protoc_insertion_point(field_get:helmsley.datasetResponse.datasetInfo.physican_name)
  return _internal_physican_name();
}
inline void datasetResponse_datasetInfo::set_physican_name(const std::string& value) {
  _internal_set_physican_name(value);
  // @@protoc_insertion_point(field_set:helmsley.datasetResponse.datasetInfo.physican_name)
}
inline std::string* datasetResponse_datasetInfo::mutable_physican_name() {
  // @@protoc_insertion_point(field_mutable:helmsley.datasetResponse.datasetInfo.physican_name)
  return _internal_mutable_physican_name();
}
inline const std::string& datasetResponse_datasetInfo::_internal_physican_name() const {
  return physican_name_.Get();
}
inline void datasetResponse_datasetInfo::_internal_set_physican_name(const std::string& value) {
  
  physican_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void datasetResponse_datasetInfo::set_physican_name(std::string&& value) {
  
  physican_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:helmsley.datasetResponse.datasetInfo.physican_name)
}
inline void datasetResponse_datasetInfo::set_physican_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  physican_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:helmsley.datasetResponse.datasetInfo.physican_name)
}
inline void datasetResponse_datasetInfo::set_physican_name(const char* value,
    size_t size) {
  
  physican_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:helmsley.datasetResponse.datasetInfo.physican_name)
}
inline std::string* datasetResponse_datasetInfo::_internal_mutable_physican_name() {
  
  return physican_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* datasetResponse_datasetInfo::release_physican_name() {
  // @@protoc_insertion_point(field_release:helmsley.datasetResponse.datasetInfo.physican_name)
  return physican_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void datasetResponse_datasetInfo::set_allocated_physican_name(std::string* physican_name) {
  if (physican_name != nullptr) {
    
  } else {
    
  }
  physican_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), physican_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:helmsley.datasetResponse.datasetInfo.physican_name)
}

// repeated string mask_folders = 5;
inline int datasetResponse_datasetInfo::_internal_mask_folders_size() const {
  return mask_folders_.size();
}
inline int datasetResponse_datasetInfo::mask_folders_size() const {
  return _internal_mask_folders_size();
}
inline void datasetResponse_datasetInfo::clear_mask_folders() {
  mask_folders_.Clear();
}
inline std::string* datasetResponse_datasetInfo::add_mask_folders() {
  // @@protoc_insertion_point(field_add_mutable:helmsley.datasetResponse.datasetInfo.mask_folders)
  return _internal_add_mask_folders();
}
inline const std::string& datasetResponse_datasetInfo::_internal_mask_folders(int index) const {
  return mask_folders_.Get(index);
}
inline const std::string& datasetResponse_datasetInfo::mask_folders(int index) const {
  // @@protoc_insertion_point(field_get:helmsley.datasetResponse.datasetInfo.mask_folders)
  return _internal_mask_folders(index);
}
inline std::string* datasetResponse_datasetInfo::mutable_mask_folders(int index) {
  // @@protoc_insertion_point(field_mutable:helmsley.datasetResponse.datasetInfo.mask_folders)
  return mask_folders_.Mutable(index);
}
inline void datasetResponse_datasetInfo::set_mask_folders(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:helmsley.datasetResponse.datasetInfo.mask_folders)
  mask_folders_.Mutable(index)->assign(value);
}
inline void datasetResponse_datasetInfo::set_mask_folders(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:helmsley.datasetResponse.datasetInfo.mask_folders)
  mask_folders_.Mutable(index)->assign(std::move(value));
}
inline void datasetResponse_datasetInfo::set_mask_folders(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mask_folders_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:helmsley.datasetResponse.datasetInfo.mask_folders)
}
inline void datasetResponse_datasetInfo::set_mask_folders(int index, const char* value, size_t size) {
  mask_folders_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:helmsley.datasetResponse.datasetInfo.mask_folders)
}
inline std::string* datasetResponse_datasetInfo::_internal_add_mask_folders() {
  return mask_folders_.Add();
}
inline void datasetResponse_datasetInfo::add_mask_folders(const std::string& value) {
  mask_folders_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:helmsley.datasetResponse.datasetInfo.mask_folders)
}
inline void datasetResponse_datasetInfo::add_mask_folders(std::string&& value) {
  mask_folders_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:helmsley.datasetResponse.datasetInfo.mask_folders)
}
inline void datasetResponse_datasetInfo::add_mask_folders(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mask_folders_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:helmsley.datasetResponse.datasetInfo.mask_folders)
}
inline void datasetResponse_datasetInfo::add_mask_folders(const char* value, size_t size) {
  mask_folders_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:helmsley.datasetResponse.datasetInfo.mask_folders)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
datasetResponse_datasetInfo::mask_folders() const {
  // @@protoc_insertion_point(field_list:helmsley.datasetResponse.datasetInfo.mask_folders)
  return mask_folders_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
datasetResponse_datasetInfo::mutable_mask_folders() {
  // @@protoc_insertion_point(field_mutable_list:helmsley.datasetResponse.datasetInfo.mask_folders)
  return &mask_folders_;
}

// -------------------------------------------------------------------

// datasetResponse

// repeated .helmsley.datasetResponse.datasetInfo datasets = 1;
inline int datasetResponse::_internal_datasets_size() const {
  return datasets_.size();
}
inline int datasetResponse::datasets_size() const {
  return _internal_datasets_size();
}
inline void datasetResponse::clear_datasets() {
  datasets_.Clear();
}
inline ::helmsley::datasetResponse_datasetInfo* datasetResponse::mutable_datasets(int index) {
  // @@protoc_insertion_point(field_mutable:helmsley.datasetResponse.datasets)
  return datasets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::helmsley::datasetResponse_datasetInfo >*
datasetResponse::mutable_datasets() {
  // @@protoc_insertion_point(field_mutable_list:helmsley.datasetResponse.datasets)
  return &datasets_;
}
inline const ::helmsley::datasetResponse_datasetInfo& datasetResponse::_internal_datasets(int index) const {
  return datasets_.Get(index);
}
inline const ::helmsley::datasetResponse_datasetInfo& datasetResponse::datasets(int index) const {
  // @@protoc_insertion_point(field_get:helmsley.datasetResponse.datasets)
  return _internal_datasets(index);
}
inline ::helmsley::datasetResponse_datasetInfo* datasetResponse::_internal_add_datasets() {
  return datasets_.Add();
}
inline ::helmsley::datasetResponse_datasetInfo* datasetResponse::add_datasets() {
  // @@protoc_insertion_point(field_add:helmsley.datasetResponse.datasets)
  return _internal_add_datasets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::helmsley::datasetResponse_datasetInfo >&
datasetResponse::datasets() const {
  // @@protoc_insertion_point(field_list:helmsley.datasetResponse.datasets)
  return datasets_;
}

// -------------------------------------------------------------------

// volumeResponse

// repeated .helmsley.volumeInfo volumes = 1;
inline int volumeResponse::_internal_volumes_size() const {
  return volumes_.size();
}
inline int volumeResponse::volumes_size() const {
  return _internal_volumes_size();
}
inline void volumeResponse::clear_volumes() {
  volumes_.Clear();
}
inline ::helmsley::volumeInfo* volumeResponse::mutable_volumes(int index) {
  // @@protoc_insertion_point(field_mutable:helmsley.volumeResponse.volumes)
  return volumes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::helmsley::volumeInfo >*
volumeResponse::mutable_volumes() {
  // @@protoc_insertion_point(field_mutable_list:helmsley.volumeResponse.volumes)
  return &volumes_;
}
inline const ::helmsley::volumeInfo& volumeResponse::_internal_volumes(int index) const {
  return volumes_.Get(index);
}
inline const ::helmsley::volumeInfo& volumeResponse::volumes(int index) const {
  // @@protoc_insertion_point(field_get:helmsley.volumeResponse.volumes)
  return _internal_volumes(index);
}
inline ::helmsley::volumeInfo* volumeResponse::_internal_add_volumes() {
  return volumes_.Add();
}
inline ::helmsley::volumeInfo* volumeResponse::add_volumes() {
  // @@protoc_insertion_point(field_add:helmsley.volumeResponse.volumes)
  return _internal_add_volumes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::helmsley::volumeInfo >&
volumeResponse::volumes() const {
  // @@protoc_insertion_point(field_list:helmsley.volumeResponse.volumes)
  return volumes_;
}

// -------------------------------------------------------------------

// volumeWholeResponse

// bytes data = 1;
inline void volumeWholeResponse::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& volumeWholeResponse::data() const {
  // @@protoc_insertion_point(field_get:helmsley.volumeWholeResponse.data)
  return _internal_data();
}
inline void volumeWholeResponse::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:helmsley.volumeWholeResponse.data)
}
inline std::string* volumeWholeResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:helmsley.volumeWholeResponse.data)
  return _internal_mutable_data();
}
inline const std::string& volumeWholeResponse::_internal_data() const {
  return data_.Get();
}
inline void volumeWholeResponse::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void volumeWholeResponse::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:helmsley.volumeWholeResponse.data)
}
inline void volumeWholeResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:helmsley.volumeWholeResponse.data)
}
inline void volumeWholeResponse::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:helmsley.volumeWholeResponse.data)
}
inline std::string* volumeWholeResponse::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* volumeWholeResponse::release_data() {
  // @@protoc_insertion_point(field_release:helmsley.volumeWholeResponse.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void volumeWholeResponse::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:helmsley.volumeWholeResponse.data)
}

// -------------------------------------------------------------------

// centerlineData

// repeated float data = 1;
inline int centerlineData::_internal_data_size() const {
  return data_.size();
}
inline int centerlineData::data_size() const {
  return _internal_data_size();
}
inline void centerlineData::clear_data() {
  data_.Clear();
}
inline float centerlineData::_internal_data(int index) const {
  return data_.Get(index);
}
inline float centerlineData::data(int index) const {
  // @@protoc_insertion_point(field_get:helmsley.centerlineData.data)
  return _internal_data(index);
}
inline void centerlineData::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:helmsley.centerlineData.data)
}
inline void centerlineData::_internal_add_data(float value) {
  data_.Add(value);
}
inline void centerlineData::add_data(float value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:helmsley.centerlineData.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
centerlineData::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
centerlineData::data() const {
  // @@protoc_insertion_point(field_list:helmsley.centerlineData.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
centerlineData::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
centerlineData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:helmsley.centerlineData.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// dcmImage

// int32 dcmID = 1;
inline void dcmImage::clear_dcmid() {
  dcmid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 dcmImage::_internal_dcmid() const {
  return dcmid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 dcmImage::dcmid() const {
  // @@protoc_insertion_point(field_get:helmsley.dcmImage.dcmID)
  return _internal_dcmid();
}
inline void dcmImage::_internal_set_dcmid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dcmid_ = value;
}
inline void dcmImage::set_dcmid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dcmid(value);
  // @@protoc_insertion_point(field_set:helmsley.dcmImage.dcmID)
}

// float position = 2;
inline void dcmImage::clear_position() {
  position_ = 0;
}
inline float dcmImage::_internal_position() const {
  return position_;
}
inline float dcmImage::position() const {
  // @@protoc_insertion_point(field_get:helmsley.dcmImage.position)
  return _internal_position();
}
inline void dcmImage::_internal_set_position(float value) {
  
  position_ = value;
}
inline void dcmImage::set_position(float value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:helmsley.dcmImage.position)
}

// bytes data = 3;
inline void dcmImage::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& dcmImage::data() const {
  // @@protoc_insertion_point(field_get:helmsley.dcmImage.data)
  return _internal_data();
}
inline void dcmImage::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:helmsley.dcmImage.data)
}
inline std::string* dcmImage::mutable_data() {
  // @@protoc_insertion_point(field_mutable:helmsley.dcmImage.data)
  return _internal_mutable_data();
}
inline const std::string& dcmImage::_internal_data() const {
  return data_.Get();
}
inline void dcmImage::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void dcmImage::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:helmsley.dcmImage.data)
}
inline void dcmImage::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:helmsley.dcmImage.data)
}
inline void dcmImage::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:helmsley.dcmImage.data)
}
inline std::string* dcmImage::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* dcmImage::release_data() {
  // @@protoc_insertion_point(field_release:helmsley.dcmImage.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void dcmImage::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:helmsley.dcmImage.data)
}

// -------------------------------------------------------------------

// RequestWholeVolume

// int32 client_id = 1;
inline void RequestWholeVolume::clear_client_id() {
  client_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestWholeVolume::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestWholeVolume::client_id() const {
  // @@protoc_insertion_point(field_get:helmsley.RequestWholeVolume.client_id)
  return _internal_client_id();
}
inline void RequestWholeVolume::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_id_ = value;
}
inline void RequestWholeVolume::set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:helmsley.RequestWholeVolume.client_id)
}

// string req_msg = 2;
inline void RequestWholeVolume::clear_req_msg() {
  req_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RequestWholeVolume::req_msg() const {
  // @@protoc_insertion_point(field_get:helmsley.RequestWholeVolume.req_msg)
  return _internal_req_msg();
}
inline void RequestWholeVolume::set_req_msg(const std::string& value) {
  _internal_set_req_msg(value);
  // @@protoc_insertion_point(field_set:helmsley.RequestWholeVolume.req_msg)
}
inline std::string* RequestWholeVolume::mutable_req_msg() {
  // @@protoc_insertion_point(field_mutable:helmsley.RequestWholeVolume.req_msg)
  return _internal_mutable_req_msg();
}
inline const std::string& RequestWholeVolume::_internal_req_msg() const {
  return req_msg_.Get();
}
inline void RequestWholeVolume::_internal_set_req_msg(const std::string& value) {
  
  req_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RequestWholeVolume::set_req_msg(std::string&& value) {
  
  req_msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:helmsley.RequestWholeVolume.req_msg)
}
inline void RequestWholeVolume::set_req_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  req_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:helmsley.RequestWholeVolume.req_msg)
}
inline void RequestWholeVolume::set_req_msg(const char* value,
    size_t size) {
  
  req_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:helmsley.RequestWholeVolume.req_msg)
}
inline std::string* RequestWholeVolume::_internal_mutable_req_msg() {
  
  return req_msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RequestWholeVolume::release_req_msg() {
  // @@protoc_insertion_point(field_release:helmsley.RequestWholeVolume.req_msg)
  return req_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestWholeVolume::set_allocated_req_msg(std::string* req_msg) {
  if (req_msg != nullptr) {
    
  } else {
    
  }
  req_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), req_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:helmsley.RequestWholeVolume.req_msg)
}

// int32 unit_size = 3;
inline void RequestWholeVolume::clear_unit_size() {
  unit_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestWholeVolume::_internal_unit_size() const {
  return unit_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestWholeVolume::unit_size() const {
  // @@protoc_insertion_point(field_get:helmsley.RequestWholeVolume.unit_size)
  return _internal_unit_size();
}
inline void RequestWholeVolume::_internal_set_unit_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  unit_size_ = value;
}
inline void RequestWholeVolume::set_unit_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_unit_size(value);
  // @@protoc_insertion_point(field_set:helmsley.RequestWholeVolume.unit_size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace helmsley

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::helmsley::volumeInfo_DataSource> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::helmsley::volumeInfo_DataSource>() {
  return ::helmsley::volumeInfo_DataSource_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transManager_2eproto
