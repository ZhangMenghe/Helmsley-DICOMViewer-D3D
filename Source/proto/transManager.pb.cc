// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transManager.proto

#include "transManager.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_transManager_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_configResponse_configInfo_transManager_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transManager_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_datasetResponse_datasetInfo_transManager_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_volumeInfo_common_2eproto;
namespace helmsley {
class configResponse_configInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<configResponse_configInfo> _instance;
} _configResponse_configInfo_default_instance_;
class configResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<configResponse> _instance;
} _configResponse_default_instance_;
class datasetResponse_datasetInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<datasetResponse_datasetInfo> _instance;
} _datasetResponse_datasetInfo_default_instance_;
class datasetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<datasetResponse> _instance;
} _datasetResponse_default_instance_;
class volumeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<volumeResponse> _instance;
} _volumeResponse_default_instance_;
class volumeWholeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<volumeWholeResponse> _instance;
} _volumeWholeResponse_default_instance_;
class centerlineDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<centerlineData> _instance;
} _centerlineData_default_instance_;
class dcmImageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<dcmImage> _instance;
} _dcmImage_default_instance_;
class RequestWholeVolumeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestWholeVolume> _instance;
} _RequestWholeVolume_default_instance_;
}  // namespace helmsley
static void InitDefaultsscc_info_RequestWholeVolume_transManager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::helmsley::_RequestWholeVolume_default_instance_;
    new (ptr) ::helmsley::RequestWholeVolume();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::helmsley::RequestWholeVolume::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestWholeVolume_transManager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestWholeVolume_transManager_2eproto}, {}};

static void InitDefaultsscc_info_centerlineData_transManager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::helmsley::_centerlineData_default_instance_;
    new (ptr) ::helmsley::centerlineData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::helmsley::centerlineData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_centerlineData_transManager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_centerlineData_transManager_2eproto}, {}};

static void InitDefaultsscc_info_configResponse_transManager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::helmsley::_configResponse_default_instance_;
    new (ptr) ::helmsley::configResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::helmsley::configResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_configResponse_transManager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_configResponse_transManager_2eproto}, {
      &scc_info_configResponse_configInfo_transManager_2eproto.base,}};

static void InitDefaultsscc_info_configResponse_configInfo_transManager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::helmsley::_configResponse_configInfo_default_instance_;
    new (ptr) ::helmsley::configResponse_configInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::helmsley::configResponse_configInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_configResponse_configInfo_transManager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_configResponse_configInfo_transManager_2eproto}, {}};

static void InitDefaultsscc_info_datasetResponse_transManager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::helmsley::_datasetResponse_default_instance_;
    new (ptr) ::helmsley::datasetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::helmsley::datasetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_datasetResponse_transManager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_datasetResponse_transManager_2eproto}, {
      &scc_info_datasetResponse_datasetInfo_transManager_2eproto.base,}};

static void InitDefaultsscc_info_datasetResponse_datasetInfo_transManager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::helmsley::_datasetResponse_datasetInfo_default_instance_;
    new (ptr) ::helmsley::datasetResponse_datasetInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::helmsley::datasetResponse_datasetInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_datasetResponse_datasetInfo_transManager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_datasetResponse_datasetInfo_transManager_2eproto}, {}};

static void InitDefaultsscc_info_dcmImage_transManager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::helmsley::_dcmImage_default_instance_;
    new (ptr) ::helmsley::dcmImage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::helmsley::dcmImage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_dcmImage_transManager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_dcmImage_transManager_2eproto}, {}};

static void InitDefaultsscc_info_volumeResponse_transManager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::helmsley::_volumeResponse_default_instance_;
    new (ptr) ::helmsley::volumeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::helmsley::volumeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_volumeResponse_transManager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_volumeResponse_transManager_2eproto}, {
      &scc_info_volumeInfo_common_2eproto.base,}};

static void InitDefaultsscc_info_volumeWholeResponse_transManager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::helmsley::_volumeWholeResponse_default_instance_;
    new (ptr) ::helmsley::volumeWholeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::helmsley::volumeWholeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_volumeWholeResponse_transManager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_volumeWholeResponse_transManager_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_transManager_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_transManager_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_transManager_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_transManager_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::helmsley::configResponse_configInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::helmsley::configResponse_configInfo, file_name_),
  PROTOBUF_FIELD_OFFSET(::helmsley::configResponse_configInfo, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::helmsley::configResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::helmsley::configResponse, configs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::helmsley::datasetResponse_datasetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::helmsley::datasetResponse_datasetInfo, folder_name_),
  PROTOBUF_FIELD_OFFSET(::helmsley::datasetResponse_datasetInfo, patient_name_),
  PROTOBUF_FIELD_OFFSET(::helmsley::datasetResponse_datasetInfo, date_),
  PROTOBUF_FIELD_OFFSET(::helmsley::datasetResponse_datasetInfo, physican_name_),
  PROTOBUF_FIELD_OFFSET(::helmsley::datasetResponse_datasetInfo, mask_folders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::helmsley::datasetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::helmsley::datasetResponse, datasets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::helmsley::volumeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::helmsley::volumeResponse, volumes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::helmsley::volumeWholeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::helmsley::volumeWholeResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::helmsley::centerlineData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::helmsley::centerlineData, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::helmsley::dcmImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::helmsley::dcmImage, dcmid_),
  PROTOBUF_FIELD_OFFSET(::helmsley::dcmImage, position_),
  PROTOBUF_FIELD_OFFSET(::helmsley::dcmImage, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::helmsley::RequestWholeVolume, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::helmsley::RequestWholeVolume, client_id_),
  PROTOBUF_FIELD_OFFSET(::helmsley::RequestWholeVolume, req_msg_),
  PROTOBUF_FIELD_OFFSET(::helmsley::RequestWholeVolume, unit_size_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::helmsley::configResponse_configInfo)},
  { 7, -1, sizeof(::helmsley::configResponse)},
  { 13, -1, sizeof(::helmsley::datasetResponse_datasetInfo)},
  { 23, -1, sizeof(::helmsley::datasetResponse)},
  { 29, -1, sizeof(::helmsley::volumeResponse)},
  { 35, -1, sizeof(::helmsley::volumeWholeResponse)},
  { 41, -1, sizeof(::helmsley::centerlineData)},
  { 47, -1, sizeof(::helmsley::dcmImage)},
  { 55, -1, sizeof(::helmsley::RequestWholeVolume)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::helmsley::_configResponse_configInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::helmsley::_configResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::helmsley::_datasetResponse_datasetInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::helmsley::_datasetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::helmsley::_volumeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::helmsley::_volumeWholeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::helmsley::_centerlineData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::helmsley::_dcmImage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::helmsley::_RequestWholeVolume_default_instance_),
};

const char descriptor_table_protodef_transManager_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022transManager.proto\022\010helmsley\032\014common.p"
  "roto\"x\n\016configResponse\0224\n\007configs\030\001 \003(\0132"
  "#.helmsley.configResponse.configInfo\0320\n\n"
  "configInfo\022\021\n\tfile_name\030\001 \001(\t\022\017\n\007content"
  "\030\002 \001(\t\"\277\001\n\017datasetResponse\0227\n\010datasets\030\001"
  " \003(\0132%.helmsley.datasetResponse.datasetI"
  "nfo\032s\n\013datasetInfo\022\023\n\013folder_name\030\001 \001(\t\022"
  "\024\n\014patient_name\030\002 \001(\t\022\014\n\004date\030\003 \001(\t\022\025\n\rp"
  "hysican_name\030\004 \001(\t\022\024\n\014mask_folders\030\005 \003(\t"
  "\".\n\016volumeResponse\022\034\n\007volumes\030\001 \003(\0132\013.vo"
  "lumeInfo\"#\n\023volumeWholeResponse\022\014\n\004data\030"
  "\001 \001(\014\"\036\n\016centerlineData\022\014\n\004data\030\001 \003(\002\"9\n"
  "\010dcmImage\022\r\n\005dcmID\030\001 \001(\005\022\020\n\010position\030\002 \001"
  "(\002\022\014\n\004data\030\003 \001(\014\"K\n\022RequestWholeVolume\022\021"
  "\n\tclient_id\030\001 \001(\005\022\017\n\007req_msg\030\002 \001(\t\022\021\n\tun"
  "it_size\030\003 \001(\0052\240\004\n\014dataTransfer\0229\n\023getAva"
  "ilableConfigs\022\010.Request\032\030.helmsley.confi"
  "gResponse\022*\n\rexportConfigs\022\010.Request\032\017.c"
  "ommonResponse\022;\n\024getAvailableDatasets\022\010."
  "Request\032\031.helmsley.datasetResponse\022<\n\024ge"
  "tVolumeFromDataset\022\010.Request\032\030.helmsley."
  "volumeResponse0\001\022*\n\010Download\022\010.Request\032\022"
  ".helmsley.dcmImage0\001\022O\n\016DownloadVolume\022\034"
  ".helmsley.RequestWholeVolume\032\035.helmsley."
  "volumeWholeResponse0\001\022/\n\rDownloadMasks\022\010"
  ".Request\032\022.helmsley.dcmImage0\001\022@\n\023Downlo"
  "adMasksVolume\022\010.Request\032\035.helmsley.volum"
  "eWholeResponse0\001\022>\n\026DownloadCenterLineDa"
  "ta\022\010.Request\032\030.helmsley.centerlineData0\001"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_transManager_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_transManager_2eproto_sccs[9] = {
  &scc_info_RequestWholeVolume_transManager_2eproto.base,
  &scc_info_centerlineData_transManager_2eproto.base,
  &scc_info_configResponse_transManager_2eproto.base,
  &scc_info_configResponse_configInfo_transManager_2eproto.base,
  &scc_info_datasetResponse_transManager_2eproto.base,
  &scc_info_datasetResponse_datasetInfo_transManager_2eproto.base,
  &scc_info_dcmImage_transManager_2eproto.base,
  &scc_info_volumeResponse_transManager_2eproto.base,
  &scc_info_volumeWholeResponse_transManager_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_transManager_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transManager_2eproto = {
  false, false, descriptor_table_protodef_transManager_2eproto, "transManager.proto", 1168,
  &descriptor_table_transManager_2eproto_once, descriptor_table_transManager_2eproto_sccs, descriptor_table_transManager_2eproto_deps, 9, 1,
  schemas, file_default_instances, TableStruct_transManager_2eproto::offsets,
  file_level_metadata_transManager_2eproto, 9, file_level_enum_descriptors_transManager_2eproto, file_level_service_descriptors_transManager_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_transManager_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_transManager_2eproto)), true);
namespace helmsley {

// ===================================================================

void configResponse_configInfo::InitAsDefaultInstance() {
}
class configResponse_configInfo::_Internal {
 public:
};

configResponse_configInfo::configResponse_configInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:helmsley.configResponse.configInfo)
}
configResponse_configInfo::configResponse_configInfo(const configResponse_configInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_name().empty()) {
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_file_name(),
      GetArena());
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_content(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:helmsley.configResponse.configInfo)
}

void configResponse_configInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_configResponse_configInfo_transManager_2eproto.base);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

configResponse_configInfo::~configResponse_configInfo() {
  // @@protoc_insertion_point(destructor:helmsley.configResponse.configInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void configResponse_configInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void configResponse_configInfo::ArenaDtor(void* object) {
  configResponse_configInfo* _this = reinterpret_cast< configResponse_configInfo* >(object);
  (void)_this;
}
void configResponse_configInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void configResponse_configInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const configResponse_configInfo& configResponse_configInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_configResponse_configInfo_transManager_2eproto.base);
  return *internal_default_instance();
}


void configResponse_configInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:helmsley.configResponse.configInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* configResponse_configInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string file_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "helmsley.configResponse.configInfo.file_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "helmsley.configResponse.configInfo.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* configResponse_configInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:helmsley.configResponse.configInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_name = 1;
  if (this->file_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "helmsley.configResponse.configInfo.file_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_name(), target);
  }

  // string content = 2;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "helmsley.configResponse.configInfo.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:helmsley.configResponse.configInfo)
  return target;
}

size_t configResponse_configInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:helmsley.configResponse.configInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 1;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // string content = 2;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void configResponse_configInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:helmsley.configResponse.configInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const configResponse_configInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<configResponse_configInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:helmsley.configResponse.configInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:helmsley.configResponse.configInfo)
    MergeFrom(*source);
  }
}

void configResponse_configInfo::MergeFrom(const configResponse_configInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:helmsley.configResponse.configInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_name().size() > 0) {
    _internal_set_file_name(from._internal_file_name());
  }
  if (from.content().size() > 0) {
    _internal_set_content(from._internal_content());
  }
}

void configResponse_configInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:helmsley.configResponse.configInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void configResponse_configInfo::CopyFrom(const configResponse_configInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:helmsley.configResponse.configInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool configResponse_configInfo::IsInitialized() const {
  return true;
}

void configResponse_configInfo::InternalSwap(configResponse_configInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  file_name_.Swap(&other->file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata configResponse_configInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void configResponse::InitAsDefaultInstance() {
}
class configResponse::_Internal {
 public:
};

configResponse::configResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  configs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:helmsley.configResponse)
}
configResponse::configResponse(const configResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      configs_(from.configs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:helmsley.configResponse)
}

void configResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_configResponse_transManager_2eproto.base);
}

configResponse::~configResponse() {
  // @@protoc_insertion_point(destructor:helmsley.configResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void configResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void configResponse::ArenaDtor(void* object) {
  configResponse* _this = reinterpret_cast< configResponse* >(object);
  (void)_this;
}
void configResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void configResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const configResponse& configResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_configResponse_transManager_2eproto.base);
  return *internal_default_instance();
}


void configResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:helmsley.configResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  configs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* configResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .helmsley.configResponse.configInfo configs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_configs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* configResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:helmsley.configResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .helmsley.configResponse.configInfo configs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_configs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_configs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:helmsley.configResponse)
  return target;
}

size_t configResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:helmsley.configResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .helmsley.configResponse.configInfo configs = 1;
  total_size += 1UL * this->_internal_configs_size();
  for (const auto& msg : this->configs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void configResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:helmsley.configResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const configResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<configResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:helmsley.configResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:helmsley.configResponse)
    MergeFrom(*source);
  }
}

void configResponse::MergeFrom(const configResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:helmsley.configResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  configs_.MergeFrom(from.configs_);
}

void configResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:helmsley.configResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void configResponse::CopyFrom(const configResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:helmsley.configResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool configResponse::IsInitialized() const {
  return true;
}

void configResponse::InternalSwap(configResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  configs_.InternalSwap(&other->configs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata configResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void datasetResponse_datasetInfo::InitAsDefaultInstance() {
}
class datasetResponse_datasetInfo::_Internal {
 public:
};

datasetResponse_datasetInfo::datasetResponse_datasetInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mask_folders_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:helmsley.datasetResponse.datasetInfo)
}
datasetResponse_datasetInfo::datasetResponse_datasetInfo(const datasetResponse_datasetInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mask_folders_(from.mask_folders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  folder_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_folder_name().empty()) {
    folder_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_folder_name(),
      GetArena());
  }
  patient_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_patient_name().empty()) {
    patient_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_patient_name(),
      GetArena());
  }
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date().empty()) {
    date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_date(),
      GetArena());
  }
  physican_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_physican_name().empty()) {
    physican_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_physican_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:helmsley.datasetResponse.datasetInfo)
}

void datasetResponse_datasetInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_datasetResponse_datasetInfo_transManager_2eproto.base);
  folder_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  patient_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  physican_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

datasetResponse_datasetInfo::~datasetResponse_datasetInfo() {
  // @@protoc_insertion_point(destructor:helmsley.datasetResponse.datasetInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void datasetResponse_datasetInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  folder_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  patient_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  physican_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void datasetResponse_datasetInfo::ArenaDtor(void* object) {
  datasetResponse_datasetInfo* _this = reinterpret_cast< datasetResponse_datasetInfo* >(object);
  (void)_this;
}
void datasetResponse_datasetInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void datasetResponse_datasetInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const datasetResponse_datasetInfo& datasetResponse_datasetInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_datasetResponse_datasetInfo_transManager_2eproto.base);
  return *internal_default_instance();
}


void datasetResponse_datasetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:helmsley.datasetResponse.datasetInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mask_folders_.Clear();
  folder_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  patient_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  physican_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* datasetResponse_datasetInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string folder_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_folder_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "helmsley.datasetResponse.datasetInfo.folder_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string patient_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_patient_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "helmsley.datasetResponse.datasetInfo.patient_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "helmsley.datasetResponse.datasetInfo.date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string physican_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_physican_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "helmsley.datasetResponse.datasetInfo.physican_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string mask_folders = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_mask_folders();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "helmsley.datasetResponse.datasetInfo.mask_folders"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* datasetResponse_datasetInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:helmsley.datasetResponse.datasetInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string folder_name = 1;
  if (this->folder_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_folder_name().data(), static_cast<int>(this->_internal_folder_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "helmsley.datasetResponse.datasetInfo.folder_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_folder_name(), target);
  }

  // string patient_name = 2;
  if (this->patient_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_patient_name().data(), static_cast<int>(this->_internal_patient_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "helmsley.datasetResponse.datasetInfo.patient_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_patient_name(), target);
  }

  // string date = 3;
  if (this->date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date().data(), static_cast<int>(this->_internal_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "helmsley.datasetResponse.datasetInfo.date");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_date(), target);
  }

  // string physican_name = 4;
  if (this->physican_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_physican_name().data(), static_cast<int>(this->_internal_physican_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "helmsley.datasetResponse.datasetInfo.physican_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_physican_name(), target);
  }

  // repeated string mask_folders = 5;
  for (int i = 0, n = this->_internal_mask_folders_size(); i < n; i++) {
    const auto& s = this->_internal_mask_folders(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "helmsley.datasetResponse.datasetInfo.mask_folders");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:helmsley.datasetResponse.datasetInfo)
  return target;
}

size_t datasetResponse_datasetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:helmsley.datasetResponse.datasetInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string mask_folders = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(mask_folders_.size());
  for (int i = 0, n = mask_folders_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      mask_folders_.Get(i));
  }

  // string folder_name = 1;
  if (this->folder_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_folder_name());
  }

  // string patient_name = 2;
  if (this->patient_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_patient_name());
  }

  // string date = 3;
  if (this->date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date());
  }

  // string physican_name = 4;
  if (this->physican_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_physican_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void datasetResponse_datasetInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:helmsley.datasetResponse.datasetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const datasetResponse_datasetInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<datasetResponse_datasetInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:helmsley.datasetResponse.datasetInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:helmsley.datasetResponse.datasetInfo)
    MergeFrom(*source);
  }
}

void datasetResponse_datasetInfo::MergeFrom(const datasetResponse_datasetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:helmsley.datasetResponse.datasetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mask_folders_.MergeFrom(from.mask_folders_);
  if (from.folder_name().size() > 0) {
    _internal_set_folder_name(from._internal_folder_name());
  }
  if (from.patient_name().size() > 0) {
    _internal_set_patient_name(from._internal_patient_name());
  }
  if (from.date().size() > 0) {
    _internal_set_date(from._internal_date());
  }
  if (from.physican_name().size() > 0) {
    _internal_set_physican_name(from._internal_physican_name());
  }
}

void datasetResponse_datasetInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:helmsley.datasetResponse.datasetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void datasetResponse_datasetInfo::CopyFrom(const datasetResponse_datasetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:helmsley.datasetResponse.datasetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool datasetResponse_datasetInfo::IsInitialized() const {
  return true;
}

void datasetResponse_datasetInfo::InternalSwap(datasetResponse_datasetInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mask_folders_.InternalSwap(&other->mask_folders_);
  folder_name_.Swap(&other->folder_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  patient_name_.Swap(&other->patient_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  date_.Swap(&other->date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  physican_name_.Swap(&other->physican_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata datasetResponse_datasetInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void datasetResponse::InitAsDefaultInstance() {
}
class datasetResponse::_Internal {
 public:
};

datasetResponse::datasetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  datasets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:helmsley.datasetResponse)
}
datasetResponse::datasetResponse(const datasetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      datasets_(from.datasets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:helmsley.datasetResponse)
}

void datasetResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_datasetResponse_transManager_2eproto.base);
}

datasetResponse::~datasetResponse() {
  // @@protoc_insertion_point(destructor:helmsley.datasetResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void datasetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void datasetResponse::ArenaDtor(void* object) {
  datasetResponse* _this = reinterpret_cast< datasetResponse* >(object);
  (void)_this;
}
void datasetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void datasetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const datasetResponse& datasetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_datasetResponse_transManager_2eproto.base);
  return *internal_default_instance();
}


void datasetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:helmsley.datasetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datasets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* datasetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .helmsley.datasetResponse.datasetInfo datasets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datasets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* datasetResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:helmsley.datasetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .helmsley.datasetResponse.datasetInfo datasets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datasets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_datasets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:helmsley.datasetResponse)
  return target;
}

size_t datasetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:helmsley.datasetResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .helmsley.datasetResponse.datasetInfo datasets = 1;
  total_size += 1UL * this->_internal_datasets_size();
  for (const auto& msg : this->datasets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void datasetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:helmsley.datasetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const datasetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<datasetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:helmsley.datasetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:helmsley.datasetResponse)
    MergeFrom(*source);
  }
}

void datasetResponse::MergeFrom(const datasetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:helmsley.datasetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datasets_.MergeFrom(from.datasets_);
}

void datasetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:helmsley.datasetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void datasetResponse::CopyFrom(const datasetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:helmsley.datasetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool datasetResponse::IsInitialized() const {
  return true;
}

void datasetResponse::InternalSwap(datasetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  datasets_.InternalSwap(&other->datasets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata datasetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void volumeResponse::InitAsDefaultInstance() {
}
class volumeResponse::_Internal {
 public:
};

void volumeResponse::clear_volumes() {
  volumes_.Clear();
}
volumeResponse::volumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  volumes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:helmsley.volumeResponse)
}
volumeResponse::volumeResponse(const volumeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      volumes_(from.volumes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:helmsley.volumeResponse)
}

void volumeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_volumeResponse_transManager_2eproto.base);
}

volumeResponse::~volumeResponse() {
  // @@protoc_insertion_point(destructor:helmsley.volumeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void volumeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void volumeResponse::ArenaDtor(void* object) {
  volumeResponse* _this = reinterpret_cast< volumeResponse* >(object);
  (void)_this;
}
void volumeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void volumeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const volumeResponse& volumeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_volumeResponse_transManager_2eproto.base);
  return *internal_default_instance();
}


void volumeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:helmsley.volumeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  volumes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* volumeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .volumeInfo volumes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_volumes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* volumeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:helmsley.volumeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .volumeInfo volumes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_volumes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_volumes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:helmsley.volumeResponse)
  return target;
}

size_t volumeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:helmsley.volumeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .volumeInfo volumes = 1;
  total_size += 1UL * this->_internal_volumes_size();
  for (const auto& msg : this->volumes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void volumeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:helmsley.volumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const volumeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<volumeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:helmsley.volumeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:helmsley.volumeResponse)
    MergeFrom(*source);
  }
}

void volumeResponse::MergeFrom(const volumeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:helmsley.volumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  volumes_.MergeFrom(from.volumes_);
}

void volumeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:helmsley.volumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void volumeResponse::CopyFrom(const volumeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:helmsley.volumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool volumeResponse::IsInitialized() const {
  return true;
}

void volumeResponse::InternalSwap(volumeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  volumes_.InternalSwap(&other->volumes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata volumeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void volumeWholeResponse::InitAsDefaultInstance() {
}
class volumeWholeResponse::_Internal {
 public:
};

volumeWholeResponse::volumeWholeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:helmsley.volumeWholeResponse)
}
volumeWholeResponse::volumeWholeResponse(const volumeWholeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:helmsley.volumeWholeResponse)
}

void volumeWholeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_volumeWholeResponse_transManager_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

volumeWholeResponse::~volumeWholeResponse() {
  // @@protoc_insertion_point(destructor:helmsley.volumeWholeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void volumeWholeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void volumeWholeResponse::ArenaDtor(void* object) {
  volumeWholeResponse* _this = reinterpret_cast< volumeWholeResponse* >(object);
  (void)_this;
}
void volumeWholeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void volumeWholeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const volumeWholeResponse& volumeWholeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_volumeWholeResponse_transManager_2eproto.base);
  return *internal_default_instance();
}


void volumeWholeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:helmsley.volumeWholeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* volumeWholeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* volumeWholeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:helmsley.volumeWholeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:helmsley.volumeWholeResponse)
  return target;
}

size_t volumeWholeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:helmsley.volumeWholeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void volumeWholeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:helmsley.volumeWholeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const volumeWholeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<volumeWholeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:helmsley.volumeWholeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:helmsley.volumeWholeResponse)
    MergeFrom(*source);
  }
}

void volumeWholeResponse::MergeFrom(const volumeWholeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:helmsley.volumeWholeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
}

void volumeWholeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:helmsley.volumeWholeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void volumeWholeResponse::CopyFrom(const volumeWholeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:helmsley.volumeWholeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool volumeWholeResponse::IsInitialized() const {
  return true;
}

void volumeWholeResponse::InternalSwap(volumeWholeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata volumeWholeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void centerlineData::InitAsDefaultInstance() {
}
class centerlineData::_Internal {
 public:
};

centerlineData::centerlineData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:helmsley.centerlineData)
}
centerlineData::centerlineData(const centerlineData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:helmsley.centerlineData)
}

void centerlineData::SharedCtor() {
}

centerlineData::~centerlineData() {
  // @@protoc_insertion_point(destructor:helmsley.centerlineData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void centerlineData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void centerlineData::ArenaDtor(void* object) {
  centerlineData* _this = reinterpret_cast< centerlineData* >(object);
  (void)_this;
}
void centerlineData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void centerlineData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const centerlineData& centerlineData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_centerlineData_transManager_2eproto.base);
  return *internal_default_instance();
}


void centerlineData::Clear() {
// @@protoc_insertion_point(message_clear_start:helmsley.centerlineData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* centerlineData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* centerlineData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:helmsley.centerlineData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float data = 1;
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:helmsley.centerlineData)
  return target;
}

size_t centerlineData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:helmsley.centerlineData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void centerlineData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:helmsley.centerlineData)
  GOOGLE_DCHECK_NE(&from, this);
  const centerlineData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<centerlineData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:helmsley.centerlineData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:helmsley.centerlineData)
    MergeFrom(*source);
  }
}

void centerlineData::MergeFrom(const centerlineData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:helmsley.centerlineData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void centerlineData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:helmsley.centerlineData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void centerlineData::CopyFrom(const centerlineData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:helmsley.centerlineData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool centerlineData::IsInitialized() const {
  return true;
}

void centerlineData::InternalSwap(centerlineData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata centerlineData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void dcmImage::InitAsDefaultInstance() {
}
class dcmImage::_Internal {
 public:
};

dcmImage::dcmImage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:helmsley.dcmImage)
}
dcmImage::dcmImage(const dcmImage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  ::memcpy(&dcmid_, &from.dcmid_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&dcmid_)) + sizeof(position_));
  // @@protoc_insertion_point(copy_constructor:helmsley.dcmImage)
}

void dcmImage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_dcmImage_transManager_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dcmid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&dcmid_)) + sizeof(position_));
}

dcmImage::~dcmImage() {
  // @@protoc_insertion_point(destructor:helmsley.dcmImage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void dcmImage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void dcmImage::ArenaDtor(void* object) {
  dcmImage* _this = reinterpret_cast< dcmImage* >(object);
  (void)_this;
}
void dcmImage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void dcmImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const dcmImage& dcmImage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_dcmImage_transManager_2eproto.base);
  return *internal_default_instance();
}


void dcmImage::Clear() {
// @@protoc_insertion_point(message_clear_start:helmsley.dcmImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&dcmid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&dcmid_)) + sizeof(position_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* dcmImage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 dcmID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dcmid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* dcmImage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:helmsley.dcmImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dcmID = 1;
  if (this->dcmid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dcmid(), target);
  }

  // float position = 2;
  if (!(this->position() <= 0 && this->position() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_position(), target);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:helmsley.dcmImage)
  return target;
}

size_t dcmImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:helmsley.dcmImage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int32 dcmID = 1;
  if (this->dcmid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dcmid());
  }

  // float position = 2;
  if (!(this->position() <= 0 && this->position() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void dcmImage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:helmsley.dcmImage)
  GOOGLE_DCHECK_NE(&from, this);
  const dcmImage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<dcmImage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:helmsley.dcmImage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:helmsley.dcmImage)
    MergeFrom(*source);
  }
}

void dcmImage::MergeFrom(const dcmImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:helmsley.dcmImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.dcmid() != 0) {
    _internal_set_dcmid(from._internal_dcmid());
  }
  if (!(from.position() <= 0 && from.position() >= 0)) {
    _internal_set_position(from._internal_position());
  }
}

void dcmImage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:helmsley.dcmImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dcmImage::CopyFrom(const dcmImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:helmsley.dcmImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dcmImage::IsInitialized() const {
  return true;
}

void dcmImage::InternalSwap(dcmImage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(dcmImage, position_)
      + sizeof(dcmImage::position_)
      - PROTOBUF_FIELD_OFFSET(dcmImage, dcmid_)>(
          reinterpret_cast<char*>(&dcmid_),
          reinterpret_cast<char*>(&other->dcmid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata dcmImage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestWholeVolume::InitAsDefaultInstance() {
}
class RequestWholeVolume::_Internal {
 public:
};

RequestWholeVolume::RequestWholeVolume(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:helmsley.RequestWholeVolume)
}
RequestWholeVolume::RequestWholeVolume(const RequestWholeVolume& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  req_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_req_msg().empty()) {
    req_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_req_msg(),
      GetArena());
  }
  ::memcpy(&client_id_, &from.client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&unit_size_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(unit_size_));
  // @@protoc_insertion_point(copy_constructor:helmsley.RequestWholeVolume)
}

void RequestWholeVolume::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestWholeVolume_transManager_2eproto.base);
  req_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unit_size_) -
      reinterpret_cast<char*>(&client_id_)) + sizeof(unit_size_));
}

RequestWholeVolume::~RequestWholeVolume() {
  // @@protoc_insertion_point(destructor:helmsley.RequestWholeVolume)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestWholeVolume::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  req_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestWholeVolume::ArenaDtor(void* object) {
  RequestWholeVolume* _this = reinterpret_cast< RequestWholeVolume* >(object);
  (void)_this;
}
void RequestWholeVolume::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestWholeVolume::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestWholeVolume& RequestWholeVolume::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestWholeVolume_transManager_2eproto.base);
  return *internal_default_instance();
}


void RequestWholeVolume::Clear() {
// @@protoc_insertion_point(message_clear_start:helmsley.RequestWholeVolume)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  req_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unit_size_) -
      reinterpret_cast<char*>(&client_id_)) + sizeof(unit_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestWholeVolume::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string req_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_req_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "helmsley.RequestWholeVolume.req_msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 unit_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          unit_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestWholeVolume::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:helmsley.RequestWholeVolume)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 client_id = 1;
  if (this->client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_client_id(), target);
  }

  // string req_msg = 2;
  if (this->req_msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_req_msg().data(), static_cast<int>(this->_internal_req_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "helmsley.RequestWholeVolume.req_msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_req_msg(), target);
  }

  // int32 unit_size = 3;
  if (this->unit_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_unit_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:helmsley.RequestWholeVolume)
  return target;
}

size_t RequestWholeVolume::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:helmsley.RequestWholeVolume)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string req_msg = 2;
  if (this->req_msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_req_msg());
  }

  // int32 client_id = 1;
  if (this->client_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_client_id());
  }

  // int32 unit_size = 3;
  if (this->unit_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unit_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestWholeVolume::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:helmsley.RequestWholeVolume)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestWholeVolume* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestWholeVolume>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:helmsley.RequestWholeVolume)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:helmsley.RequestWholeVolume)
    MergeFrom(*source);
  }
}

void RequestWholeVolume::MergeFrom(const RequestWholeVolume& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:helmsley.RequestWholeVolume)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.req_msg().size() > 0) {
    _internal_set_req_msg(from._internal_req_msg());
  }
  if (from.client_id() != 0) {
    _internal_set_client_id(from._internal_client_id());
  }
  if (from.unit_size() != 0) {
    _internal_set_unit_size(from._internal_unit_size());
  }
}

void RequestWholeVolume::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:helmsley.RequestWholeVolume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestWholeVolume::CopyFrom(const RequestWholeVolume& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:helmsley.RequestWholeVolume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestWholeVolume::IsInitialized() const {
  return true;
}

void RequestWholeVolume::InternalSwap(RequestWholeVolume* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  req_msg_.Swap(&other->req_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestWholeVolume, unit_size_)
      + sizeof(RequestWholeVolume::unit_size_)
      - PROTOBUF_FIELD_OFFSET(RequestWholeVolume, client_id_)>(
          reinterpret_cast<char*>(&client_id_),
          reinterpret_cast<char*>(&other->client_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestWholeVolume::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace helmsley
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::helmsley::configResponse_configInfo* Arena::CreateMaybeMessage< ::helmsley::configResponse_configInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::helmsley::configResponse_configInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::helmsley::configResponse* Arena::CreateMaybeMessage< ::helmsley::configResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::helmsley::configResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::helmsley::datasetResponse_datasetInfo* Arena::CreateMaybeMessage< ::helmsley::datasetResponse_datasetInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::helmsley::datasetResponse_datasetInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::helmsley::datasetResponse* Arena::CreateMaybeMessage< ::helmsley::datasetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::helmsley::datasetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::helmsley::volumeResponse* Arena::CreateMaybeMessage< ::helmsley::volumeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::helmsley::volumeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::helmsley::volumeWholeResponse* Arena::CreateMaybeMessage< ::helmsley::volumeWholeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::helmsley::volumeWholeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::helmsley::centerlineData* Arena::CreateMaybeMessage< ::helmsley::centerlineData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::helmsley::centerlineData >(arena);
}
template<> PROTOBUF_NOINLINE ::helmsley::dcmImage* Arena::CreateMaybeMessage< ::helmsley::dcmImage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::helmsley::dcmImage >(arena);
}
template<> PROTOBUF_NOINLINE ::helmsley::RequestWholeVolume* Arena::CreateMaybeMessage< ::helmsley::RequestWholeVolume >(Arena* arena) {
  return Arena::CreateMessageInternal< ::helmsley::RequestWholeVolume >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
