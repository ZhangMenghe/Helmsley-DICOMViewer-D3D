// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class commonResponse;
class commonResponseDefaultTypeInternal;
extern commonResponseDefaultTypeInternal _commonResponse_default_instance_;
class scoreInfo;
class scoreInfoDefaultTypeInternal;
extern scoreInfoDefaultTypeInternal _scoreInfo_default_instance_;
class volumeInfo;
class volumeInfoDefaultTypeInternal;
extern volumeInfoDefaultTypeInternal _volumeInfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Request* Arena::CreateMaybeMessage<::Request>(Arena*);
template<> ::commonResponse* Arena::CreateMaybeMessage<::commonResponse>(Arena*);
template<> ::scoreInfo* Arena::CreateMaybeMessage<::scoreInfo>(Arena*);
template<> ::volumeInfo* Arena::CreateMaybeMessage<::volumeInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum volumeInfo_DataSource : int {
  volumeInfo_DataSource_LOCAL = 0,
  volumeInfo_DataSource_SERVER = 1,
  volumeInfo_DataSource_DEVICE = 2,
  volumeInfo_DataSource_volumeInfo_DataSource_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  volumeInfo_DataSource_volumeInfo_DataSource_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool volumeInfo_DataSource_IsValid(int value);
constexpr volumeInfo_DataSource volumeInfo_DataSource_DataSource_MIN = volumeInfo_DataSource_LOCAL;
constexpr volumeInfo_DataSource volumeInfo_DataSource_DataSource_MAX = volumeInfo_DataSource_DEVICE;
constexpr int volumeInfo_DataSource_DataSource_ARRAYSIZE = volumeInfo_DataSource_DataSource_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* volumeInfo_DataSource_descriptor();
template<typename T>
inline const std::string& volumeInfo_DataSource_Name(T enum_t_value) {
  static_assert(::std::is_same<T, volumeInfo_DataSource>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function volumeInfo_DataSource_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    volumeInfo_DataSource_descriptor(), enum_t_value);
}
inline bool volumeInfo_DataSource_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, volumeInfo_DataSource* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<volumeInfo_DataSource>(
    volumeInfo_DataSource_descriptor(), name, value);
}
// ===================================================================

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReqMsgFieldNumber = 2,
    kClientIdFieldNumber = 1,
  };
  // string req_msg = 2;
  void clear_req_msg();
  const std::string& req_msg() const;
  void set_req_msg(const std::string& value);
  void set_req_msg(std::string&& value);
  void set_req_msg(const char* value);
  void set_req_msg(const char* value, size_t size);
  std::string* mutable_req_msg();
  std::string* release_req_msg();
  void set_allocated_req_msg(std::string* req_msg);
  private:
  const std::string& _internal_req_msg() const;
  void _internal_set_req_msg(const std::string& value);
  std::string* _internal_mutable_req_msg();
  public:

  // int32 client_id = 1;
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::int32 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr req_msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class commonResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commonResponse) */ {
 public:
  inline commonResponse() : commonResponse(nullptr) {}
  virtual ~commonResponse();

  commonResponse(const commonResponse& from);
  commonResponse(commonResponse&& from) noexcept
    : commonResponse() {
    *this = ::std::move(from);
  }

  inline commonResponse& operator=(const commonResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline commonResponse& operator=(commonResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const commonResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const commonResponse* internal_default_instance() {
    return reinterpret_cast<const commonResponse*>(
               &_commonResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(commonResponse& a, commonResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(commonResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(commonResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline commonResponse* New() const final {
    return CreateMaybeMessage<commonResponse>(nullptr);
  }

  commonResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<commonResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const commonResponse& from);
  void MergeFrom(const commonResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(commonResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commonResponse";
  }
  protected:
  explicit commonResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResMsgFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string res_msg = 2;
  void clear_res_msg();
  const std::string& res_msg() const;
  void set_res_msg(const std::string& value);
  void set_res_msg(std::string&& value);
  void set_res_msg(const char* value);
  void set_res_msg(const char* value, size_t size);
  std::string* mutable_res_msg();
  std::string* release_res_msg();
  void set_allocated_res_msg(std::string* res_msg);
  private:
  const std::string& _internal_res_msg() const;
  void _internal_set_res_msg(const std::string& value);
  std::string* _internal_mutable_res_msg();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:commonResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_msg_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class scoreInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:scoreInfo) */ {
 public:
  inline scoreInfo() : scoreInfo(nullptr) {}
  virtual ~scoreInfo();

  scoreInfo(const scoreInfo& from);
  scoreInfo(scoreInfo&& from) noexcept
    : scoreInfo() {
    *this = ::std::move(from);
  }

  inline scoreInfo& operator=(const scoreInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline scoreInfo& operator=(scoreInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const scoreInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const scoreInfo* internal_default_instance() {
    return reinterpret_cast<const scoreInfo*>(
               &_scoreInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(scoreInfo& a, scoreInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(scoreInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(scoreInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline scoreInfo* New() const final {
    return CreateMaybeMessage<scoreInfo>(nullptr);
  }

  scoreInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<scoreInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const scoreInfo& from);
  void MergeFrom(const scoreInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(scoreInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "scoreInfo";
  }
  protected:
  explicit scoreInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawScoreFieldNumber = 4,
    kVolScoreFieldNumber = 5,
    kRgroupIdFieldNumber = 1,
    kRankIdFieldNumber = 2,
    kRankScoreFieldNumber = 3,
  };
  // repeated float raw_score = 4;
  int raw_score_size() const;
  private:
  int _internal_raw_score_size() const;
  public:
  void clear_raw_score();
  private:
  float _internal_raw_score(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_raw_score() const;
  void _internal_add_raw_score(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_raw_score();
  public:
  float raw_score(int index) const;
  void set_raw_score(int index, float value);
  void add_raw_score(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      raw_score() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_raw_score();

  // repeated float vol_score = 5;
  int vol_score_size() const;
  private:
  int _internal_vol_score_size() const;
  public:
  void clear_vol_score();
  private:
  float _internal_vol_score(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_vol_score() const;
  void _internal_add_vol_score(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_vol_score();
  public:
  float vol_score(int index) const;
  void set_vol_score(int index, float value);
  void add_vol_score(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      vol_score() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_vol_score();

  // int32 rgroup_id = 1;
  void clear_rgroup_id();
  ::PROTOBUF_NAMESPACE_ID::int32 rgroup_id() const;
  void set_rgroup_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rgroup_id() const;
  void _internal_set_rgroup_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rank_id = 2;
  void clear_rank_id();
  ::PROTOBUF_NAMESPACE_ID::int32 rank_id() const;
  void set_rank_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rank_id() const;
  void _internal_set_rank_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float rank_score = 3;
  void clear_rank_score();
  float rank_score() const;
  void set_rank_score(float value);
  private:
  float _internal_rank_score() const;
  void _internal_set_rank_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:scoreInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > raw_score_;
  mutable std::atomic<int> _raw_score_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > vol_score_;
  mutable std::atomic<int> _vol_score_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 rgroup_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 rank_id_;
  float rank_score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class volumeInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:volumeInfo) */ {
 public:
  inline volumeInfo() : volumeInfo(nullptr) {}
  virtual ~volumeInfo();

  volumeInfo(const volumeInfo& from);
  volumeInfo(volumeInfo&& from) noexcept
    : volumeInfo() {
    *this = ::std::move(from);
  }

  inline volumeInfo& operator=(const volumeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline volumeInfo& operator=(volumeInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const volumeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const volumeInfo* internal_default_instance() {
    return reinterpret_cast<const volumeInfo*>(
               &_volumeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(volumeInfo& a, volumeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(volumeInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(volumeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline volumeInfo* New() const final {
    return CreateMaybeMessage<volumeInfo>(nullptr);
  }

  volumeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<volumeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const volumeInfo& from);
  void MergeFrom(const volumeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(volumeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "volumeInfo";
  }
  protected:
  explicit volumeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef volumeInfo_DataSource DataSource;
  static constexpr DataSource LOCAL =
    volumeInfo_DataSource_LOCAL;
  static constexpr DataSource SERVER =
    volumeInfo_DataSource_SERVER;
  static constexpr DataSource DEVICE =
    volumeInfo_DataSource_DEVICE;
  static inline bool DataSource_IsValid(int value) {
    return volumeInfo_DataSource_IsValid(value);
  }
  static constexpr DataSource DataSource_MIN =
    volumeInfo_DataSource_DataSource_MIN;
  static constexpr DataSource DataSource_MAX =
    volumeInfo_DataSource_DataSource_MAX;
  static constexpr int DataSource_ARRAYSIZE =
    volumeInfo_DataSource_DataSource_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DataSource_descriptor() {
    return volumeInfo_DataSource_descriptor();
  }
  template<typename T>
  static inline const std::string& DataSource_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DataSource>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DataSource_Name.");
    return volumeInfo_DataSource_Name(enum_t_value);
  }
  static inline bool DataSource_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DataSource* value) {
    return volumeInfo_DataSource_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDimsFieldNumber = 3,
    kOrientationFieldNumber = 4,
    kResolutionFieldNumber = 5,
    kFolderNameFieldNumber = 1,
    kFolderPathFieldNumber = 2,
    kSampleImgFieldNumber = 9,
    kScoresFieldNumber = 10,
    kVolumeLocRangeFieldNumber = 6,
    kWithMaskFieldNumber = 7,
    kDataSourceFieldNumber = 8,
  };
  // repeated int32 dims = 3;
  int dims_size() const;
  private:
  int _internal_dims_size() const;
  public:
  void clear_dims();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dims(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_dims() const;
  void _internal_add_dims(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_dims();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 dims(int index) const;
  void set_dims(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_dims(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      dims() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_dims();

  // repeated float orientation = 4;
  int orientation_size() const;
  private:
  int _internal_orientation_size() const;
  public:
  void clear_orientation();
  private:
  float _internal_orientation(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_orientation() const;
  void _internal_add_orientation(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_orientation();
  public:
  float orientation(int index) const;
  void set_orientation(int index, float value);
  void add_orientation(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      orientation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_orientation();

  // repeated float resolution = 5;
  int resolution_size() const;
  private:
  int _internal_resolution_size() const;
  public:
  void clear_resolution();
  private:
  float _internal_resolution(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_resolution() const;
  void _internal_add_resolution(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_resolution();
  public:
  float resolution(int index) const;
  void set_resolution(int index, float value);
  void add_resolution(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      resolution() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_resolution();

  // string folder_name = 1;
  void clear_folder_name();
  const std::string& folder_name() const;
  void set_folder_name(const std::string& value);
  void set_folder_name(std::string&& value);
  void set_folder_name(const char* value);
  void set_folder_name(const char* value, size_t size);
  std::string* mutable_folder_name();
  std::string* release_folder_name();
  void set_allocated_folder_name(std::string* folder_name);
  private:
  const std::string& _internal_folder_name() const;
  void _internal_set_folder_name(const std::string& value);
  std::string* _internal_mutable_folder_name();
  public:

  // string folder_path = 2;
  void clear_folder_path();
  const std::string& folder_path() const;
  void set_folder_path(const std::string& value);
  void set_folder_path(std::string&& value);
  void set_folder_path(const char* value);
  void set_folder_path(const char* value, size_t size);
  std::string* mutable_folder_path();
  std::string* release_folder_path();
  void set_allocated_folder_path(std::string* folder_path);
  private:
  const std::string& _internal_folder_path() const;
  void _internal_set_folder_path(const std::string& value);
  std::string* _internal_mutable_folder_path();
  public:

  // bytes sample_img = 9;
  void clear_sample_img();
  const std::string& sample_img() const;
  void set_sample_img(const std::string& value);
  void set_sample_img(std::string&& value);
  void set_sample_img(const char* value);
  void set_sample_img(const void* value, size_t size);
  std::string* mutable_sample_img();
  std::string* release_sample_img();
  void set_allocated_sample_img(std::string* sample_img);
  private:
  const std::string& _internal_sample_img() const;
  void _internal_set_sample_img(const std::string& value);
  std::string* _internal_mutable_sample_img();
  public:

  // .scoreInfo scores = 10;
  bool has_scores() const;
  private:
  bool _internal_has_scores() const;
  public:
  void clear_scores();
  const ::scoreInfo& scores() const;
  ::scoreInfo* release_scores();
  ::scoreInfo* mutable_scores();
  void set_allocated_scores(::scoreInfo* scores);
  private:
  const ::scoreInfo& _internal_scores() const;
  ::scoreInfo* _internal_mutable_scores();
  public:
  void unsafe_arena_set_allocated_scores(
      ::scoreInfo* scores);
  ::scoreInfo* unsafe_arena_release_scores();

  // float volume_loc_range = 6;
  void clear_volume_loc_range();
  float volume_loc_range() const;
  void set_volume_loc_range(float value);
  private:
  float _internal_volume_loc_range() const;
  void _internal_set_volume_loc_range(float value);
  public:

  // bool with_mask = 7;
  void clear_with_mask();
  bool with_mask() const;
  void set_with_mask(bool value);
  private:
  bool _internal_with_mask() const;
  void _internal_set_with_mask(bool value);
  public:

  // .volumeInfo.DataSource data_source = 8;
  void clear_data_source();
  ::volumeInfo_DataSource data_source() const;
  void set_data_source(::volumeInfo_DataSource value);
  private:
  ::volumeInfo_DataSource _internal_data_source() const;
  void _internal_set_data_source(::volumeInfo_DataSource value);
  public:

  // @@protoc_insertion_point(class_scope:volumeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > dims_;
  mutable std::atomic<int> _dims_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > orientation_;
  mutable std::atomic<int> _orientation_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > resolution_;
  mutable std::atomic<int> _resolution_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr folder_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr folder_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sample_img_;
  ::scoreInfo* scores_;
  float volume_loc_range_;
  bool with_mask_;
  int data_source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// int32 client_id = 1;
inline void Request::clear_client_id() {
  client_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Request::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Request::client_id() const {
  // @@protoc_insertion_point(field_get:Request.client_id)
  return _internal_client_id();
}
inline void Request::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_id_ = value;
}
inline void Request::set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:Request.client_id)
}

// string req_msg = 2;
inline void Request::clear_req_msg() {
  req_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Request::req_msg() const {
  // @@protoc_insertion_point(field_get:Request.req_msg)
  return _internal_req_msg();
}
inline void Request::set_req_msg(const std::string& value) {
  _internal_set_req_msg(value);
  // @@protoc_insertion_point(field_set:Request.req_msg)
}
inline std::string* Request::mutable_req_msg() {
  // @@protoc_insertion_point(field_mutable:Request.req_msg)
  return _internal_mutable_req_msg();
}
inline const std::string& Request::_internal_req_msg() const {
  return req_msg_.Get();
}
inline void Request::_internal_set_req_msg(const std::string& value) {
  
  req_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request::set_req_msg(std::string&& value) {
  
  req_msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Request.req_msg)
}
inline void Request::set_req_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  req_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Request.req_msg)
}
inline void Request::set_req_msg(const char* value,
    size_t size) {
  
  req_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Request.req_msg)
}
inline std::string* Request::_internal_mutable_req_msg() {
  
  return req_msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request::release_req_msg() {
  // @@protoc_insertion_point(field_release:Request.req_msg)
  return req_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_req_msg(std::string* req_msg) {
  if (req_msg != nullptr) {
    
  } else {
    
  }
  req_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), req_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Request.req_msg)
}

// -------------------------------------------------------------------

// commonResponse

// bool success = 1;
inline void commonResponse::clear_success() {
  success_ = false;
}
inline bool commonResponse::_internal_success() const {
  return success_;
}
inline bool commonResponse::success() const {
  // @@protoc_insertion_point(field_get:commonResponse.success)
  return _internal_success();
}
inline void commonResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void commonResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:commonResponse.success)
}

// string res_msg = 2;
inline void commonResponse::clear_res_msg() {
  res_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& commonResponse::res_msg() const {
  // @@protoc_insertion_point(field_get:commonResponse.res_msg)
  return _internal_res_msg();
}
inline void commonResponse::set_res_msg(const std::string& value) {
  _internal_set_res_msg(value);
  // @@protoc_insertion_point(field_set:commonResponse.res_msg)
}
inline std::string* commonResponse::mutable_res_msg() {
  // @@protoc_insertion_point(field_mutable:commonResponse.res_msg)
  return _internal_mutable_res_msg();
}
inline const std::string& commonResponse::_internal_res_msg() const {
  return res_msg_.Get();
}
inline void commonResponse::_internal_set_res_msg(const std::string& value) {
  
  res_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void commonResponse::set_res_msg(std::string&& value) {
  
  res_msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:commonResponse.res_msg)
}
inline void commonResponse::set_res_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  res_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:commonResponse.res_msg)
}
inline void commonResponse::set_res_msg(const char* value,
    size_t size) {
  
  res_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:commonResponse.res_msg)
}
inline std::string* commonResponse::_internal_mutable_res_msg() {
  
  return res_msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* commonResponse::release_res_msg() {
  // @@protoc_insertion_point(field_release:commonResponse.res_msg)
  return res_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void commonResponse::set_allocated_res_msg(std::string* res_msg) {
  if (res_msg != nullptr) {
    
  } else {
    
  }
  res_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:commonResponse.res_msg)
}

// -------------------------------------------------------------------

// scoreInfo

// int32 rgroup_id = 1;
inline void scoreInfo::clear_rgroup_id() {
  rgroup_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 scoreInfo::_internal_rgroup_id() const {
  return rgroup_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 scoreInfo::rgroup_id() const {
  // @@protoc_insertion_point(field_get:scoreInfo.rgroup_id)
  return _internal_rgroup_id();
}
inline void scoreInfo::_internal_set_rgroup_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rgroup_id_ = value;
}
inline void scoreInfo::set_rgroup_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rgroup_id(value);
  // @@protoc_insertion_point(field_set:scoreInfo.rgroup_id)
}

// int32 rank_id = 2;
inline void scoreInfo::clear_rank_id() {
  rank_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 scoreInfo::_internal_rank_id() const {
  return rank_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 scoreInfo::rank_id() const {
  // @@protoc_insertion_point(field_get:scoreInfo.rank_id)
  return _internal_rank_id();
}
inline void scoreInfo::_internal_set_rank_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rank_id_ = value;
}
inline void scoreInfo::set_rank_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rank_id(value);
  // @@protoc_insertion_point(field_set:scoreInfo.rank_id)
}

// float rank_score = 3;
inline void scoreInfo::clear_rank_score() {
  rank_score_ = 0;
}
inline float scoreInfo::_internal_rank_score() const {
  return rank_score_;
}
inline float scoreInfo::rank_score() const {
  // @@protoc_insertion_point(field_get:scoreInfo.rank_score)
  return _internal_rank_score();
}
inline void scoreInfo::_internal_set_rank_score(float value) {
  
  rank_score_ = value;
}
inline void scoreInfo::set_rank_score(float value) {
  _internal_set_rank_score(value);
  // @@protoc_insertion_point(field_set:scoreInfo.rank_score)
}

// repeated float raw_score = 4;
inline int scoreInfo::_internal_raw_score_size() const {
  return raw_score_.size();
}
inline int scoreInfo::raw_score_size() const {
  return _internal_raw_score_size();
}
inline void scoreInfo::clear_raw_score() {
  raw_score_.Clear();
}
inline float scoreInfo::_internal_raw_score(int index) const {
  return raw_score_.Get(index);
}
inline float scoreInfo::raw_score(int index) const {
  // @@protoc_insertion_point(field_get:scoreInfo.raw_score)
  return _internal_raw_score(index);
}
inline void scoreInfo::set_raw_score(int index, float value) {
  raw_score_.Set(index, value);
  // @@protoc_insertion_point(field_set:scoreInfo.raw_score)
}
inline void scoreInfo::_internal_add_raw_score(float value) {
  raw_score_.Add(value);
}
inline void scoreInfo::add_raw_score(float value) {
  _internal_add_raw_score(value);
  // @@protoc_insertion_point(field_add:scoreInfo.raw_score)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
scoreInfo::_internal_raw_score() const {
  return raw_score_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
scoreInfo::raw_score() const {
  // @@protoc_insertion_point(field_list:scoreInfo.raw_score)
  return _internal_raw_score();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
scoreInfo::_internal_mutable_raw_score() {
  return &raw_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
scoreInfo::mutable_raw_score() {
  // @@protoc_insertion_point(field_mutable_list:scoreInfo.raw_score)
  return _internal_mutable_raw_score();
}

// repeated float vol_score = 5;
inline int scoreInfo::_internal_vol_score_size() const {
  return vol_score_.size();
}
inline int scoreInfo::vol_score_size() const {
  return _internal_vol_score_size();
}
inline void scoreInfo::clear_vol_score() {
  vol_score_.Clear();
}
inline float scoreInfo::_internal_vol_score(int index) const {
  return vol_score_.Get(index);
}
inline float scoreInfo::vol_score(int index) const {
  // @@protoc_insertion_point(field_get:scoreInfo.vol_score)
  return _internal_vol_score(index);
}
inline void scoreInfo::set_vol_score(int index, float value) {
  vol_score_.Set(index, value);
  // @@protoc_insertion_point(field_set:scoreInfo.vol_score)
}
inline void scoreInfo::_internal_add_vol_score(float value) {
  vol_score_.Add(value);
}
inline void scoreInfo::add_vol_score(float value) {
  _internal_add_vol_score(value);
  // @@protoc_insertion_point(field_add:scoreInfo.vol_score)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
scoreInfo::_internal_vol_score() const {
  return vol_score_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
scoreInfo::vol_score() const {
  // @@protoc_insertion_point(field_list:scoreInfo.vol_score)
  return _internal_vol_score();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
scoreInfo::_internal_mutable_vol_score() {
  return &vol_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
scoreInfo::mutable_vol_score() {
  // @@protoc_insertion_point(field_mutable_list:scoreInfo.vol_score)
  return _internal_mutable_vol_score();
}

// -------------------------------------------------------------------

// volumeInfo

// string folder_name = 1;
inline void volumeInfo::clear_folder_name() {
  folder_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& volumeInfo::folder_name() const {
  // @@protoc_insertion_point(field_get:volumeInfo.folder_name)
  return _internal_folder_name();
}
inline void volumeInfo::set_folder_name(const std::string& value) {
  _internal_set_folder_name(value);
  // @@protoc_insertion_point(field_set:volumeInfo.folder_name)
}
inline std::string* volumeInfo::mutable_folder_name() {
  // @@protoc_insertion_point(field_mutable:volumeInfo.folder_name)
  return _internal_mutable_folder_name();
}
inline const std::string& volumeInfo::_internal_folder_name() const {
  return folder_name_.Get();
}
inline void volumeInfo::_internal_set_folder_name(const std::string& value) {
  
  folder_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void volumeInfo::set_folder_name(std::string&& value) {
  
  folder_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:volumeInfo.folder_name)
}
inline void volumeInfo::set_folder_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  folder_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:volumeInfo.folder_name)
}
inline void volumeInfo::set_folder_name(const char* value,
    size_t size) {
  
  folder_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:volumeInfo.folder_name)
}
inline std::string* volumeInfo::_internal_mutable_folder_name() {
  
  return folder_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* volumeInfo::release_folder_name() {
  // @@protoc_insertion_point(field_release:volumeInfo.folder_name)
  return folder_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void volumeInfo::set_allocated_folder_name(std::string* folder_name) {
  if (folder_name != nullptr) {
    
  } else {
    
  }
  folder_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), folder_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:volumeInfo.folder_name)
}

// string folder_path = 2;
inline void volumeInfo::clear_folder_path() {
  folder_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& volumeInfo::folder_path() const {
  // @@protoc_insertion_point(field_get:volumeInfo.folder_path)
  return _internal_folder_path();
}
inline void volumeInfo::set_folder_path(const std::string& value) {
  _internal_set_folder_path(value);
  // @@protoc_insertion_point(field_set:volumeInfo.folder_path)
}
inline std::string* volumeInfo::mutable_folder_path() {
  // @@protoc_insertion_point(field_mutable:volumeInfo.folder_path)
  return _internal_mutable_folder_path();
}
inline const std::string& volumeInfo::_internal_folder_path() const {
  return folder_path_.Get();
}
inline void volumeInfo::_internal_set_folder_path(const std::string& value) {
  
  folder_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void volumeInfo::set_folder_path(std::string&& value) {
  
  folder_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:volumeInfo.folder_path)
}
inline void volumeInfo::set_folder_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  folder_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:volumeInfo.folder_path)
}
inline void volumeInfo::set_folder_path(const char* value,
    size_t size) {
  
  folder_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:volumeInfo.folder_path)
}
inline std::string* volumeInfo::_internal_mutable_folder_path() {
  
  return folder_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* volumeInfo::release_folder_path() {
  // @@protoc_insertion_point(field_release:volumeInfo.folder_path)
  return folder_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void volumeInfo::set_allocated_folder_path(std::string* folder_path) {
  if (folder_path != nullptr) {
    
  } else {
    
  }
  folder_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), folder_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:volumeInfo.folder_path)
}

// repeated int32 dims = 3;
inline int volumeInfo::_internal_dims_size() const {
  return dims_.size();
}
inline int volumeInfo::dims_size() const {
  return _internal_dims_size();
}
inline void volumeInfo::clear_dims() {
  dims_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 volumeInfo::_internal_dims(int index) const {
  return dims_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 volumeInfo::dims(int index) const {
  // @@protoc_insertion_point(field_get:volumeInfo.dims)
  return _internal_dims(index);
}
inline void volumeInfo::set_dims(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:volumeInfo.dims)
}
inline void volumeInfo::_internal_add_dims(::PROTOBUF_NAMESPACE_ID::int32 value) {
  dims_.Add(value);
}
inline void volumeInfo::add_dims(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_dims(value);
  // @@protoc_insertion_point(field_add:volumeInfo.dims)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
volumeInfo::_internal_dims() const {
  return dims_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
volumeInfo::dims() const {
  // @@protoc_insertion_point(field_list:volumeInfo.dims)
  return _internal_dims();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
volumeInfo::_internal_mutable_dims() {
  return &dims_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
volumeInfo::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:volumeInfo.dims)
  return _internal_mutable_dims();
}

// repeated float orientation = 4;
inline int volumeInfo::_internal_orientation_size() const {
  return orientation_.size();
}
inline int volumeInfo::orientation_size() const {
  return _internal_orientation_size();
}
inline void volumeInfo::clear_orientation() {
  orientation_.Clear();
}
inline float volumeInfo::_internal_orientation(int index) const {
  return orientation_.Get(index);
}
inline float volumeInfo::orientation(int index) const {
  // @@protoc_insertion_point(field_get:volumeInfo.orientation)
  return _internal_orientation(index);
}
inline void volumeInfo::set_orientation(int index, float value) {
  orientation_.Set(index, value);
  // @@protoc_insertion_point(field_set:volumeInfo.orientation)
}
inline void volumeInfo::_internal_add_orientation(float value) {
  orientation_.Add(value);
}
inline void volumeInfo::add_orientation(float value) {
  _internal_add_orientation(value);
  // @@protoc_insertion_point(field_add:volumeInfo.orientation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
volumeInfo::_internal_orientation() const {
  return orientation_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
volumeInfo::orientation() const {
  // @@protoc_insertion_point(field_list:volumeInfo.orientation)
  return _internal_orientation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
volumeInfo::_internal_mutable_orientation() {
  return &orientation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
volumeInfo::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable_list:volumeInfo.orientation)
  return _internal_mutable_orientation();
}

// repeated float resolution = 5;
inline int volumeInfo::_internal_resolution_size() const {
  return resolution_.size();
}
inline int volumeInfo::resolution_size() const {
  return _internal_resolution_size();
}
inline void volumeInfo::clear_resolution() {
  resolution_.Clear();
}
inline float volumeInfo::_internal_resolution(int index) const {
  return resolution_.Get(index);
}
inline float volumeInfo::resolution(int index) const {
  // @@protoc_insertion_point(field_get:volumeInfo.resolution)
  return _internal_resolution(index);
}
inline void volumeInfo::set_resolution(int index, float value) {
  resolution_.Set(index, value);
  // @@protoc_insertion_point(field_set:volumeInfo.resolution)
}
inline void volumeInfo::_internal_add_resolution(float value) {
  resolution_.Add(value);
}
inline void volumeInfo::add_resolution(float value) {
  _internal_add_resolution(value);
  // @@protoc_insertion_point(field_add:volumeInfo.resolution)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
volumeInfo::_internal_resolution() const {
  return resolution_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
volumeInfo::resolution() const {
  // @@protoc_insertion_point(field_list:volumeInfo.resolution)
  return _internal_resolution();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
volumeInfo::_internal_mutable_resolution() {
  return &resolution_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
volumeInfo::mutable_resolution() {
  // @@protoc_insertion_point(field_mutable_list:volumeInfo.resolution)
  return _internal_mutable_resolution();
}

// float volume_loc_range = 6;
inline void volumeInfo::clear_volume_loc_range() {
  volume_loc_range_ = 0;
}
inline float volumeInfo::_internal_volume_loc_range() const {
  return volume_loc_range_;
}
inline float volumeInfo::volume_loc_range() const {
  // @@protoc_insertion_point(field_get:volumeInfo.volume_loc_range)
  return _internal_volume_loc_range();
}
inline void volumeInfo::_internal_set_volume_loc_range(float value) {
  
  volume_loc_range_ = value;
}
inline void volumeInfo::set_volume_loc_range(float value) {
  _internal_set_volume_loc_range(value);
  // @@protoc_insertion_point(field_set:volumeInfo.volume_loc_range)
}

// bool with_mask = 7;
inline void volumeInfo::clear_with_mask() {
  with_mask_ = false;
}
inline bool volumeInfo::_internal_with_mask() const {
  return with_mask_;
}
inline bool volumeInfo::with_mask() const {
  // @@protoc_insertion_point(field_get:volumeInfo.with_mask)
  return _internal_with_mask();
}
inline void volumeInfo::_internal_set_with_mask(bool value) {
  
  with_mask_ = value;
}
inline void volumeInfo::set_with_mask(bool value) {
  _internal_set_with_mask(value);
  // @@protoc_insertion_point(field_set:volumeInfo.with_mask)
}

// .volumeInfo.DataSource data_source = 8;
inline void volumeInfo::clear_data_source() {
  data_source_ = 0;
}
inline ::volumeInfo_DataSource volumeInfo::_internal_data_source() const {
  return static_cast< ::volumeInfo_DataSource >(data_source_);
}
inline ::volumeInfo_DataSource volumeInfo::data_source() const {
  // @@protoc_insertion_point(field_get:volumeInfo.data_source)
  return _internal_data_source();
}
inline void volumeInfo::_internal_set_data_source(::volumeInfo_DataSource value) {
  
  data_source_ = value;
}
inline void volumeInfo::set_data_source(::volumeInfo_DataSource value) {
  _internal_set_data_source(value);
  // @@protoc_insertion_point(field_set:volumeInfo.data_source)
}

// bytes sample_img = 9;
inline void volumeInfo::clear_sample_img() {
  sample_img_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& volumeInfo::sample_img() const {
  // @@protoc_insertion_point(field_get:volumeInfo.sample_img)
  return _internal_sample_img();
}
inline void volumeInfo::set_sample_img(const std::string& value) {
  _internal_set_sample_img(value);
  // @@protoc_insertion_point(field_set:volumeInfo.sample_img)
}
inline std::string* volumeInfo::mutable_sample_img() {
  // @@protoc_insertion_point(field_mutable:volumeInfo.sample_img)
  return _internal_mutable_sample_img();
}
inline const std::string& volumeInfo::_internal_sample_img() const {
  return sample_img_.Get();
}
inline void volumeInfo::_internal_set_sample_img(const std::string& value) {
  
  sample_img_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void volumeInfo::set_sample_img(std::string&& value) {
  
  sample_img_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:volumeInfo.sample_img)
}
inline void volumeInfo::set_sample_img(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sample_img_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:volumeInfo.sample_img)
}
inline void volumeInfo::set_sample_img(const void* value,
    size_t size) {
  
  sample_img_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:volumeInfo.sample_img)
}
inline std::string* volumeInfo::_internal_mutable_sample_img() {
  
  return sample_img_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* volumeInfo::release_sample_img() {
  // @@protoc_insertion_point(field_release:volumeInfo.sample_img)
  return sample_img_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void volumeInfo::set_allocated_sample_img(std::string* sample_img) {
  if (sample_img != nullptr) {
    
  } else {
    
  }
  sample_img_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sample_img,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:volumeInfo.sample_img)
}

// .scoreInfo scores = 10;
inline bool volumeInfo::_internal_has_scores() const {
  return this != internal_default_instance() && scores_ != nullptr;
}
inline bool volumeInfo::has_scores() const {
  return _internal_has_scores();
}
inline void volumeInfo::clear_scores() {
  if (GetArena() == nullptr && scores_ != nullptr) {
    delete scores_;
  }
  scores_ = nullptr;
}
inline const ::scoreInfo& volumeInfo::_internal_scores() const {
  const ::scoreInfo* p = scores_;
  return p != nullptr ? *p : *reinterpret_cast<const ::scoreInfo*>(
      &::_scoreInfo_default_instance_);
}
inline const ::scoreInfo& volumeInfo::scores() const {
  // @@protoc_insertion_point(field_get:volumeInfo.scores)
  return _internal_scores();
}
inline void volumeInfo::unsafe_arena_set_allocated_scores(
    ::scoreInfo* scores) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scores_);
  }
  scores_ = scores;
  if (scores) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:volumeInfo.scores)
}
inline ::scoreInfo* volumeInfo::release_scores() {
  
  ::scoreInfo* temp = scores_;
  scores_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::scoreInfo* volumeInfo::unsafe_arena_release_scores() {
  // @@protoc_insertion_point(field_release:volumeInfo.scores)
  
  ::scoreInfo* temp = scores_;
  scores_ = nullptr;
  return temp;
}
inline ::scoreInfo* volumeInfo::_internal_mutable_scores() {
  
  if (scores_ == nullptr) {
    auto* p = CreateMaybeMessage<::scoreInfo>(GetArena());
    scores_ = p;
  }
  return scores_;
}
inline ::scoreInfo* volumeInfo::mutable_scores() {
  // @@protoc_insertion_point(field_mutable:volumeInfo.scores)
  return _internal_mutable_scores();
}
inline void volumeInfo::set_allocated_scores(::scoreInfo* scores) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete scores_;
  }
  if (scores) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scores);
    if (message_arena != submessage_arena) {
      scores = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scores, submessage_arena);
    }
    
  } else {
    
  }
  scores_ = scores;
  // @@protoc_insertion_point(field_set_allocated:volumeInfo.scores)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::volumeInfo_DataSource> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::volumeInfo_DataSource>() {
  return ::volumeInfo_DataSource_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
