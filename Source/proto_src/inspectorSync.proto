syntax = "proto3";

package helmsley;
import "common.proto";

enum ReqType{
    SET = 0;
    GET = 1;
}
message VPMsg{
    int32 client_id = 1;
    int32 gid = 2;
    enum VPType{
        POS = 0;
        SCALE = 1;
        ROT = 2;
    }
    VPType volume_pose_type = 3;
    repeated float values = 4;
}
message GestureOp{
    int32 client_id = 1;
    int64 gid = 2;
    enum OPType{
        TOUCH_DOWN = 0;
        TOUCH_UP = 1;
        TOUCH_MOVE = 2;
        SCALE = 3;
        PAN = 4;
    }
    OPType type = 3;
    float x = 4;
    float y = 5;
}
message OperationBatch{
    float bid = 1;
    repeated GestureOp gesture_op = 2;
}
message VolumePoseBatch{
    float bid = 1;
    repeated VPMsg pose_msgs = 2;
}
message ResetMsg{
    int32 client_id = 1;
    repeated string check_keys = 2;
    repeated bool check_values = 3;
    repeated float volume_pose = 4;
    repeated float camera_pose = 5;
}

message TuneMsg{
    int32 client_id = 1;
    enum TuneType{
        ADD_ONE = 0;
        REMOVE_ONE = 1;
        REMOTE_ALL = 2;
        SET_ONE = 3;
        SET_ALL = 4;
        SET_VISIBLE = 5;
        SET_TARGET = 6;
        CUT_PLANE = 7;
        COLOR_SCHEME = 8;
        RENDER_METHOD = 9;
    }
    TuneType type = 2;
    int32 target = 3;
    int32 sub_target = 4;
    float value = 5;
    repeated float values = 6;
}

message CheckMsg{
    int32 client_id = 1;
    string key = 2;
    bool value = 3;
}
message MaskMsg{
    int32 client_id = 1;
    int32 num = 2;
    int32 mbits = 3;
}
message DataMsg{
    int32 client_id = 1;
    string ds_name = 2;
    string volume_name = 3;
}
message FrameUpdateMsg{
    enum MsgType{
        GESTURE = 0;
        TUNE = 1;
        CHECK = 2;
        MASK = 3;
        RESET = 4;
        DATA = 5;
    }
    repeated MsgType types = 1;
    repeated GestureOp gestures = 2;
    repeated TuneMsg tunes = 3;
    repeated CheckMsg checks = 4;
    MaskMsg mask_value = 5;
    ResetMsg reset_value = 6;
    DataMsg data_value = 7;
}
service inspectorSync{
    rpc startBroadcast(Request) returns(commonResponse);
    rpc startReceiveBroadcast(Request) returns(commonResponse);
    rpc requestReset(ResetMsg) returns(commonResponse);

    rpc getVolumePoses(Request) returns(VolumePoseBatch);
    rpc getOperations(Request) returns(OperationBatch);
    rpc getUpdates(Request) returns(FrameUpdateMsg);

    rpc setVolumePose(VPMsg) returns(commonResponse);
    rpc setGestureOp(GestureOp) returns(commonResponse);
    rpc setTuneParams(TuneMsg) returns(commonResponse);
    rpc setCheckParams(CheckMsg) returns(commonResponse);
    rpc setMaskParams(MaskMsg) returns(commonResponse);
    rpc setDisplayVolume(DataMsg) returns(commonResponse);
}